(node:23) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
FAIL ./flatten-array_testSuite.js
  FlattenArray
    ✓ flattens a nested list (1 ms)
    ✕ flattens a 2 level nested list (3 ms)
    ✕ flattens a  3 level nested list (1 ms)
    ✕ flattens a 5 level nested list (1 ms)
    ✕ flattens a 6 level nest list
    ✕ flattens a 6 level nest list with null values (2 ms)
    ✕ returns an empty list if all values in nested list are null

  ● FlattenArray › flattens a 2 level nested list

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
    -   1,
        2,
        3,
        4,
    +   1,
        5,
      ]

       7 |   });
       8 |   it('flattens a 2 level nested list', function () {
    >  9 |     expect(flattener.flatten([1, [2, 3, 4], 5])).toEqual([1, 2, 3, 4, 5]);
         |                                                  ^
      10 |   });
      11 |   it('flattens a  3 level nested list', function () {
      12 |     expect(flattener.flatten([1, [2, 3, 4], 5, [6, [7, 8]]])).toEqual([1, 2, 3, 4, 5, 6, 7, 8]);

      at Object.<anonymous> (flatten-array_testSuite.js:9:50)

  ● FlattenArray › flattens a  3 level nested list

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Array [
    -   1,
    +   7,
    +   8,
    +   6,
        2,
        3,
        4,
    +   1,
        5,
    -   6,
    -   7,
    -   8,
      ]

      10 |   });
      11 |   it('flattens a  3 level nested list', function () {
    > 12 |     expect(flattener.flatten([1, [2, 3, 4], 5, [6, [7, 8]]])).toEqual([1, 2, 3, 4, 5, 6, 7, 8]);
         |                                                               ^
      13 |   });
      14 |   it('flattens a 5 level nested list', function () {
      15 |     expect(flattener.flatten([0, 2, [[2, 3], 8, 100, 4, [[[50]]]], -2])).toEqual([0, 2, 2, 3, 8, 100, 4, 50, -2]);

      at Object.<anonymous> (flatten-array_testSuite.js:12:63)

  ● FlattenArray › flattens a 5 level nested list

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Array [
    -   0,
    -   2,
    +   50,
        2,
        3,
        8,
        100,
        4,
    -   50,
    +   0,
    +   2,
        -2,
      ]

      13 |   });
      14 |   it('flattens a 5 level nested list', function () {
    > 15 |     expect(flattener.flatten([0, 2, [[2, 3], 8, 100, 4, [[[50]]]], -2])).toEqual([0, 2, 2, 3, 8, 100, 4, 50, -2]);
         |                                                                          ^
      16 |   });
      17 |   it('flattens a 6 level nest list', function () {
      18 |     expect(flattener.flatten([1, [2, [[3]], [4, [[5]]], 6, 7], 8])).toEqual([1, 2, 3, 4, 5, 6, 7, 8]);

      at Object.<anonymous> (flatten-array_testSuite.js:15:74)

  ● FlattenArray › flattens a 6 level nest list

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Array [
    -   1,
    -   2,
    -   3,
    -   4,
        5,
    +   4,
    +   3,
    +   2,
        6,
        7,
    +   1,
        8,
      ]

      16 |   });
      17 |   it('flattens a 6 level nest list', function () {
    > 18 |     expect(flattener.flatten([1, [2, [[3]], [4, [[5]]], 6, 7], 8])).toEqual([1, 2, 3, 4, 5, 6, 7, 8]);
         |                                                                     ^
      19 |   });
      20 |   it('flattens a 6 level nest list with null values', function () {
      21 |     expect(flattener.flatten([0, 2, [[2, 3], 8, [[100]], null, [[null]]], -2])).toEqual([0, 2, 2, 3, 8, 100, -2]);

      at Object.<anonymous> (flatten-array_testSuite.js:18:69)

  ● FlattenArray › flattens a 6 level nest list with null values

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 5

      Array [
    -   0,
    -   2,
    +   null,
    +   100,
        2,
        3,
        8,
    -   100,
    +   null,
    +   0,
    +   2,
        -2,
      ]

      19 |   });
      20 |   it('flattens a 6 level nest list with null values', function () {
    > 21 |     expect(flattener.flatten([0, 2, [[2, 3], 8, [[100]], null, [[null]]], -2])).toEqual([0, 2, 2, 3, 8, 100, -2]);
         |                                                                                 ^
      22 |   });
      23 |   it('returns an empty list if all values in nested list are null', function () {
      24 |     expect(flattener.flatten([null, [[[null]]], null, null, [[null, null], null], null])).toEqual([]);

      at Object.<anonymous> (flatten-array_testSuite.js:21:81)

  ● FlattenArray › returns an empty list if all values in nested list are null

    expect(received).toEqual(expected) // deep equality

    - Expected  -  1
    + Received  + 10

    - Array []
    + Array [
    +   null,
    +   null,
    +   null,
    +   null,
    +   null,
    +   null,
    +   null,
    +   null,
    + ]

      22 |   });
      23 |   it('returns an empty list if all values in nested list are null', function () {
    > 24 |     expect(flattener.flatten([null, [[[null]]], null, null, [[null, null], null], null])).toEqual([]);
         |                                                                                           ^
      25 |   });
      26 | });
      27 |

      at Object.<anonymous> (flatten-array_testSuite.js:24:91)

Test Suites: 1 failed, 1 total
Tests:       6 failed, 1 passed, 7 total
Snapshots:   0 total
Time:        0.329 s
Ran all test suites.
Command exited with non-zero status 1
	Command being timed: "node --experimental-vm-modules ./node_modules/.bin/jest --config=jest.config.js --testMatch=**/*testSuite.js --silent=false"
	User time (seconds): 0.26
	System time (seconds): 0.06
	Percent of CPU this job got: 37%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 83820
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 14503
	Voluntary context switches: 7640
	Involuntary context switches: 2489
	Swaps: 0
	File system inputs: 0
	File system outputs: 16
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
