(node:23) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
FAIL ./freelancer-rates_testSuite.js
  freelancer rates
    day rate
      ✓ at 16/hour (1 ms)
      ✓ at 25/hour (1 ms)
      ✕ at 31.40/hour
      ✕ at 89.89/hour
      ✕ at 97.654321/hour
    month rate
      ✓ at 16/hour
      ✓ at 25/hour
      ✓ at 25/hour with a 50% discount
      ✓ at 25/hour with a 1.23% discount
      ✕ at 31.40/hour with a 5% discount
      ✕ at 89.89/hour with a 5% discount
      ✕ at 89.89/hour with a 5% discount
      ✕ at 97.654321/hour with a 5% discount
    days in budget
      with a budget of 1280
        ✓ at 16/hour
        ✓ at 25/hour
        ✓ at 25/hour with 30% discount (1 ms)
      with a budget of 10.000
        ✓ at 25/hour with 5% discount
        ✕ at 31.40/hour with 5% discount
        ✓ at 89.89/hour with 5% discount
        ✓ at 97.654321/hour with 5% discount

  ● freelancer rates › day rate › at 31.40/hour

    expect(received).toBeCloseTo(expected, precision)

    Expected: 251.2
    Received: 248

    Expected precision:    6
    Expected difference: < 0.0000005
    Received difference:   3.1999999999999886

      19 |     test('at 31.40/hour', () => {
      20 |       const actual = dayRate(31.4);
    > 21 |       expect(actual).toBeCloseTo(251.2, DIFFERENCE_PRECISION_IN_DIGITS);
         |                      ^
      22 |     });
      23 |
      24 |     test('at 89.89/hour', () => {

      at Object.<anonymous> (freelancer-rates_testSuite.js:21:22)

  ● freelancer rates › day rate › at 89.89/hour

    expect(received).toBeCloseTo(expected, precision)

    Expected: 719.12
    Received: 712

    Expected precision:    6
    Expected difference: < 0.0000005
    Received difference:   7.1200000000000045

      24 |     test('at 89.89/hour', () => {
      25 |       const actual = dayRate(89.89);
    > 26 |       expect(actual).toBeCloseTo(719.12, DIFFERENCE_PRECISION_IN_DIGITS);
         |                      ^
      27 |     });
      28 |
      29 |     test('at 97.654321/hour', () => {

      at Object.<anonymous> (freelancer-rates_testSuite.js:26:22)

  ● freelancer rates › day rate › at 97.654321/hour

    expect(received).toBeCloseTo(expected, precision)

    Expected: 781.234568
    Received: 776

    Expected precision:    6
    Expected difference: < 0.0000005
    Received difference:   5.2345679999999675

      29 |     test('at 97.654321/hour', () => {
      30 |       const actual = dayRate(97.654321);
    > 31 |       expect(actual).toBeCloseTo(781.234568, DIFFERENCE_PRECISION_IN_DIGITS);
         |                      ^
      32 |     });
      33 |   });
      34 |

      at Object.<anonymous> (freelancer-rates_testSuite.js:31:22)

  ● freelancer rates › month rate › at 31.40/hour with a 5% discount

    expect(received).toBe(expected) // Object.is equality

    Expected: 5251
    Received: 5184

      56 |     test('at 31.40/hour with a 5% discount', () => {
      57 |       const actual = monthRate(31.4, 0.05);
    > 58 |       expect(actual).toBe(5251);
         |                      ^
      59 |     });
      60 |
      61 |     test('at 89.89/hour with a 5% discount', () => {

      at Object.<anonymous> (freelancer-rates_testSuite.js:58:22)

  ● freelancer rates › month rate › at 89.89/hour with a 5% discount

    expect(received).toBe(expected) // Object.is equality

    Expected: 15030
    Received: 14881

      61 |     test('at 89.89/hour with a 5% discount', () => {
      62 |       const actual = monthRate(89.89, 0.05);
    > 63 |       expect(actual).toBe(15030);
         |                      ^
      64 |     });
      65 |
      66 |     test('at 89.89/hour with a 5% discount', () => {

      at Object.<anonymous> (freelancer-rates_testSuite.js:63:22)

  ● freelancer rates › month rate › at 89.89/hour with a 5% discount

    expect(received).toBe(expected) // Object.is equality

    Expected: 15030
    Received: 14881

      66 |     test('at 89.89/hour with a 5% discount', () => {
      67 |       const actual = monthRate(89.89, 0.05);
    > 68 |       expect(actual).toBe(15030);
         |                      ^
      69 |     });
      70 |
      71 |     test('at 97.654321/hour with a 5% discount', () => {

      at Object.<anonymous> (freelancer-rates_testSuite.js:68:22)

  ● freelancer rates › month rate › at 97.654321/hour with a 5% discount

    expect(received).toBe(expected) // Object.is equality

    Expected: 16328
    Received: 16219

      71 |     test('at 97.654321/hour with a 5% discount', () => {
      72 |       const actual = monthRate(97.654321, 0.05);
    > 73 |       expect(actual).toBe(16328);
         |                      ^
      74 |     });
      75 |   });
      76 |

      at Object.<anonymous> (freelancer-rates_testSuite.js:73:22)

  ● freelancer rates › days in budget › with a budget of 10.000 › at 31.40/hour with 5% discount

    expect(received).toBeCloseTo(expected, precision)

    Expected: 41
    Received: 42

    Expected precision:    6
    Expected difference: < 0.0000005
    Received difference:   1

      111 |         const expected = 41;
      112 |
    > 113 |         expect(actual).toBeCloseTo(expected, DIFFERENCE_PRECISION_IN_DIGITS);
          |                        ^
      114 |       });
      115 |
      116 |       test('at 89.89/hour with 5% discount', () => {

      at Object.<anonymous> (freelancer-rates_testSuite.js:113:24)

Test Suites: 1 failed, 1 total
Tests:       8 failed, 12 passed, 20 total
Snapshots:   0 total
Time:        0.198 s
Ran all test suites.
Command exited with non-zero status 1
	Command being timed: "node --experimental-vm-modules ./node_modules/.bin/jest --config=jest.config.js --testMatch=**/*testSuite.js --silent=false"
	User time (seconds): 0.25
	System time (seconds): 0.07
	Percent of CPU this job got: 61%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.53
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 84476
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 14650
	Voluntary context switches: 7484
	Involuntary context switches: 561
	Swaps: 0
	File system inputs: 0
	File system outputs: 16
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
