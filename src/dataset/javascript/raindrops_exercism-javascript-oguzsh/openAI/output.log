(node:23) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
FAIL ./raindrops_testSuite.js (11.279 s)
  Raindrops
    ✓ the sound for 1 is 1 (78 ms)
    ✕ the sound for 3 is Pling (26 ms)
    ✕ the sound for 5 is Plang (1 ms)
    ✕ the sound for 7 is Plong (7 ms)
    ✕ the sound for 6 is Pling as it has a factor 3 (2 ms)
    ✓ 2 to the power 3 does not make a raindrop sound as 3 is the exponent not the base (4 ms)
    ✕ the sound for 9 is Pling as it has a factor 3 (15 ms)
    ✕ the sound for 10 is Plang as it has a factor 5 (20 ms)
    ✕ the sound for 14 is Plong as it has a factor of 7 (15 ms)
    ✕ the sound for 15 is PlingPlang as it has factors 3 and 5 (9 ms)
    ✕ the sound for 21 is PlingPlong as it has factors 3 and 7 (12 ms)
    ✕ the sound for 25 is Plang as it has a factor 5 (19 ms)
    ✕ the sound for 27 is Pling as it has a factor 3 (8 ms)
    ✕ the sound for 35 is PlangPlong as it has factors 5 and 7 (14 ms)
    ✕ the sound for 49 is Plong as it has a factor 7 (16 ms)
    ✓ the sound for 52 is 52 (9 ms)
    ✕ the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7 (4 ms)
    ✕ the sound for 3125 is Plang as it has a factor 5 (6 ms)

  ● Raindrops › the sound for 3 is Pling

    expect(received).toEqual(expected) // deep equality

    Expected: "Pling"
    Received: "l"

      4 |   test("the sound for 1 is 1", () => expect(convert(1)).toEqual("1"));
      5 |
    > 6 |   test("the sound for 3 is Pling", () => expect(convert(3)).toEqual("Pling"));
        |                                                             ^
      7 |
      8 |   test("the sound for 5 is Plang", () => expect(convert(5)).toEqual("Plang"));
      9 |

      at Object.<anonymous> (raindrops_testSuite.js:6:61)

  ● Raindrops › the sound for 5 is Plang

    expect(received).toEqual(expected) // deep equality

    Expected: "Plang"
    Received: "l"

       6 |   test("the sound for 3 is Pling", () => expect(convert(3)).toEqual("Pling"));
       7 |
    >  8 |   test("the sound for 5 is Plang", () => expect(convert(5)).toEqual("Plang"));
         |                                                             ^
       9 |
      10 |   test("the sound for 7 is Plong", () => expect(convert(7)).toEqual("Plong"));
      11 |

      at Object.<anonymous> (raindrops_testSuite.js:8:61)

  ● Raindrops › the sound for 7 is Plong

    expect(received).toEqual(expected) // deep equality

    Expected: "Plong"
    Received: "l"

       8 |   test("the sound for 5 is Plang", () => expect(convert(5)).toEqual("Plang"));
       9 |
    > 10 |   test("the sound for 7 is Plong", () => expect(convert(7)).toEqual("Plong"));
         |                                                             ^
      11 |
      12 |   test("the sound for 6 is Pling as it has a factor 3", () =>
      13 |     expect(convert(6)).toEqual("Pling"));

      at Object.<anonymous> (raindrops_testSuite.js:10:61)

  ● Raindrops › the sound for 6 is Pling as it has a factor 3

    expect(received).toEqual(expected) // deep equality

    Expected: "Pling"
    Received: "l"

      11 |
      12 |   test("the sound for 6 is Pling as it has a factor 3", () =>
    > 13 |     expect(convert(6)).toEqual("Pling"));
         |                        ^
      14 |
      15 |   test("2 to the power 3 does not make a raindrop sound as 3 is the exponent not the base", () =>
      16 |     expect(convert(8)).toEqual("8"));

      at Object.<anonymous> (raindrops_testSuite.js:13:24)

  ● Raindrops › the sound for 9 is Pling as it has a factor 3

    expect(received).toEqual(expected) // deep equality

    Expected: "Pling"
    Received: "l"

      17 |
      18 |   test("the sound for 9 is Pling as it has a factor 3", () =>
    > 19 |     expect(convert(9)).toEqual("Pling"));
         |                        ^
      20 |
      21 |   test("the sound for 10 is Plang as it has a factor 5", () =>
      22 |     expect(convert(10)).toEqual("Plang"));

      at Object.<anonymous> (raindrops_testSuite.js:19:24)

  ● Raindrops › the sound for 10 is Plang as it has a factor 5

    expect(received).toEqual(expected) // deep equality

    Expected: "Plang"
    Received: "l"

      20 |
      21 |   test("the sound for 10 is Plang as it has a factor 5", () =>
    > 22 |     expect(convert(10)).toEqual("Plang"));
         |                         ^
      23 |
      24 |   test("the sound for 14 is Plong as it has a factor of 7", () =>
      25 |     expect(convert(14)).toEqual("Plong"));

      at Object.<anonymous> (raindrops_testSuite.js:22:25)

  ● Raindrops › the sound for 14 is Plong as it has a factor of 7

    expect(received).toEqual(expected) // deep equality

    Expected: "Plong"
    Received: "l"

      23 |
      24 |   test("the sound for 14 is Plong as it has a factor of 7", () =>
    > 25 |     expect(convert(14)).toEqual("Plong"));
         |                         ^
      26 |
      27 |   test("the sound for 15 is PlingPlang as it has factors 3 and 5", () =>
      28 |     expect(convert(15)).toEqual("PlingPlang"));

      at Object.<anonymous> (raindrops_testSuite.js:25:25)

  ● Raindrops › the sound for 15 is PlingPlang as it has factors 3 and 5

    expect(received).toEqual(expected) // deep equality

    Expected: "PlingPlang"
    Received: "ll"

      26 |
      27 |   test("the sound for 15 is PlingPlang as it has factors 3 and 5", () =>
    > 28 |     expect(convert(15)).toEqual("PlingPlang"));
         |                         ^
      29 |
      30 |   test("the sound for 21 is PlingPlong as it has factors 3 and 7", () =>
      31 |     expect(convert(21)).toEqual("PlingPlong"));

      at Object.<anonymous> (raindrops_testSuite.js:28:25)

  ● Raindrops › the sound for 21 is PlingPlong as it has factors 3 and 7

    expect(received).toEqual(expected) // deep equality

    Expected: "PlingPlong"
    Received: "ll"

      29 |
      30 |   test("the sound for 21 is PlingPlong as it has factors 3 and 7", () =>
    > 31 |     expect(convert(21)).toEqual("PlingPlong"));
         |                         ^
      32 |
      33 |   test("the sound for 25 is Plang as it has a factor 5", () =>
      34 |     expect(convert(25)).toEqual("Plang"));

      at Object.<anonymous> (raindrops_testSuite.js:31:25)

  ● Raindrops › the sound for 25 is Plang as it has a factor 5

    expect(received).toEqual(expected) // deep equality

    Expected: "Plang"
    Received: "l"

      32 |
      33 |   test("the sound for 25 is Plang as it has a factor 5", () =>
    > 34 |     expect(convert(25)).toEqual("Plang"));
         |                         ^
      35 |
      36 |   test("the sound for 27 is Pling as it has a factor 3", () =>
      37 |     expect(convert(27)).toEqual("Pling"));

      at Object.<anonymous> (raindrops_testSuite.js:34:25)

  ● Raindrops › the sound for 27 is Pling as it has a factor 3

    expect(received).toEqual(expected) // deep equality

    Expected: "Pling"
    Received: "l"

      35 |
      36 |   test("the sound for 27 is Pling as it has a factor 3", () =>
    > 37 |     expect(convert(27)).toEqual("Pling"));
         |                         ^
      38 |
      39 |   test("the sound for 35 is PlangPlong as it has factors 5 and 7", () =>
      40 |     expect(convert(35)).toEqual("PlangPlong"));

      at Object.<anonymous> (raindrops_testSuite.js:37:25)

  ● Raindrops › the sound for 35 is PlangPlong as it has factors 5 and 7

    expect(received).toEqual(expected) // deep equality

    Expected: "PlangPlong"
    Received: "ll"

      38 |
      39 |   test("the sound for 35 is PlangPlong as it has factors 5 and 7", () =>
    > 40 |     expect(convert(35)).toEqual("PlangPlong"));
         |                         ^
      41 |
      42 |   test("the sound for 49 is Plong as it has a factor 7", () =>
      43 |     expect(convert(49)).toEqual("Plong"));

      at Object.<anonymous> (raindrops_testSuite.js:40:25)

  ● Raindrops › the sound for 49 is Plong as it has a factor 7

    expect(received).toEqual(expected) // deep equality

    Expected: "Plong"
    Received: "l"

      41 |
      42 |   test("the sound for 49 is Plong as it has a factor 7", () =>
    > 43 |     expect(convert(49)).toEqual("Plong"));
         |                         ^
      44 |
      45 |   test("the sound for 52 is 52", () => expect(convert(52)).toEqual("52"));
      46 |

      at Object.<anonymous> (raindrops_testSuite.js:43:25)

  ● Raindrops › the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7

    expect(received).toEqual(expected) // deep equality

    Expected: "PlingPlangPlong"
    Received: "lll"

      46 |
      47 |   test("the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7", () =>
    > 48 |     expect(convert(105)).toEqual("PlingPlangPlong"));
         |                          ^
      49 |
      50 |   test("the sound for 3125 is Plang as it has a factor 5", () =>
      51 |     expect(convert(3125)).toEqual("Plang"));

      at Object.<anonymous> (raindrops_testSuite.js:48:26)

  ● Raindrops › the sound for 3125 is Plang as it has a factor 5

    expect(received).toEqual(expected) // deep equality

    Expected: "Plang"
    Received: "l"

      49 |
      50 |   test("the sound for 3125 is Plang as it has a factor 5", () =>
    > 51 |     expect(convert(3125)).toEqual("Plang"));
         |                           ^
      52 | });
      53 |

      at Object.<anonymous> (raindrops_testSuite.js:51:27)

Test Suites: 1 failed, 1 total
Tests:       15 failed, 3 passed, 18 total
Snapshots:   0 total
Time:        13.258 s
Ran all test suites.
Command exited with non-zero status 1
	Command being timed: "node --experimental-vm-modules ./node_modules/.bin/jest --config=jest.config.js --testMatch=**/*testSuite.js --silent=false"
	User time (seconds): 2.65
	System time (seconds): 2.89
	Percent of CPU this job got: 15%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:36.23
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 84692
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 14889
	Voluntary context switches: 6730
	Involuntary context switches: 5196
	Swaps: 0
	File system inputs: 0
	File system outputs: 16
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
