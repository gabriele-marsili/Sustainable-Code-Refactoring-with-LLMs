(node:23) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
FAIL ./clock_testSuite.js
  Clock
    Creating a new clock with an initial time
      ✓ on the hour (17 ms)
      ✓ past the hour (19 ms)
      ✓ midnight is zero hours (1 ms)
      ✓ hour rolls over
      ✓ hour rolls over continuously
      ✓ sixty minutes is next hour (1 ms)
      ✓ minutes roll over
      ✓ minutes roll over continuously
      ✓ hour and minutes roll over (16 ms)
      ✓ hour and minutes roll over continuously (1 ms)
      ✓ hour and minutes roll over to exactly midnight
      ✕ negative hour (21 ms)
      ✕ negative hour rolls over
      ✕ negative hour rolls over continuously
      ✓ negative minutes
      ✕ negative minutes rolls over
      ✕ negative minutes rolls over continuously (1 ms)
      ✕ negative hour and minutes both roll over
      ✕ negative hour and minutes both roll over continuously (1 ms)
      Adding and subtracting minutes
        ✓ add minutes
        ✓ add no minutes (1 ms)
        ✓ add to next hour
        ✓ add more than one hour
        ✓ add more than two hours with carry
        ✓ add across midnight (11 ms)
        ✓ add more than one day (1500 min = 25 hrs)
        ✓ add more than two days (1 ms)
        ✓ subtract minutes
        ✓ subtract to previous hour
        ✓ subtract more than an hour
        ✓ subtract across midnight
        ✓ subtract more than two hours
        ✓ subtract more than two hours with borrow
        ✓ subtract more than one day (1500 min = 25 hrs)
        ✓ subtract more than two days
      Construct two separate clocks, set times, test if they are equal
        ✓ clocks with same time (1 ms)
        ✓ clocks a minute apart
        ✓ clocks an hour apart
        ✓ clocks with hour overflow
        ✓ clocks with hour overflow by several days
        ✕ clocks with negative hour (1 ms)
        ✕ clocks with negative hour that wraps
        ✕ clocks with negative hour that wraps multiple times
        ✓ clocks with minute overflow
        ✓ clocks with minute overflow by several days
        ✓ clocks with negative minute (22 ms)
        ✕ clocks with negative minute that wraps (1 ms)
        ✕ clocks with negative minute that wraps multiple times
        ✕ clocks with negative hours and minutes (1 ms)
        ✕ clocks with negative hours and minutes that wrap

  ● Clock › Creating a new clock with an initial time › negative hour

    expect(received).toEqual(expected) // deep equality

    Expected: "23:15"
    Received: "-1:-45"

      48 |
      49 |     test('negative hour', () => {
    > 50 |       expect(at(-1, 15).toString()).toEqual('23:15');
         |                                     ^
      51 |     });
      52 |
      53 |     test('negative hour rolls over', () => {

      at Object.<anonymous> (clock_testSuite.js:50:37)

  ● Clock › Creating a new clock with an initial time › negative hour rolls over

    expect(received).toEqual(expected) // deep equality

    Expected: "23:00"
    Received: "-1:00"

      52 |
      53 |     test('negative hour rolls over', () => {
    > 54 |       expect(at(-25, 0).toString()).toEqual('23:00');
         |                                     ^
      55 |     });
      56 |
      57 |     test('negative hour rolls over continuously', () => {

      at Object.<anonymous> (clock_testSuite.js:54:37)

  ● Clock › Creating a new clock with an initial time › negative hour rolls over continuously

    expect(received).toEqual(expected) // deep equality

    Expected: "05:00"
    Received: "-19:00"

      56 |
      57 |     test('negative hour rolls over continuously', () => {
    > 58 |       expect(at(-91, 0).toString()).toEqual('05:00');
         |                                     ^
      59 |     });
      60 |
      61 |     test('negative minutes', () => {

      at Object.<anonymous> (clock_testSuite.js:58:37)

  ● Clock › Creating a new clock with an initial time › negative minutes rolls over

    expect(received).toEqual(expected) // deep equality

    Expected: "22:20"
    Received: "-2:-40"

      64 |
      65 |     test('negative minutes rolls over', () => {
    > 66 |       expect(at(1, -160).toString()).toEqual('22:20');
         |                                      ^
      67 |     });
      68 |
      69 |     test('negative minutes rolls over continuously', () => {

      at Object.<anonymous> (clock_testSuite.js:66:38)

  ● Clock › Creating a new clock with an initial time › negative minutes rolls over continuously

    expect(received).toEqual(expected) // deep equality

    Expected: "16:40"
    Received: "-8:-20"

      68 |
      69 |     test('negative minutes rolls over continuously', () => {
    > 70 |       expect(at(1, -4820).toString()).toEqual('16:40');
         |                                       ^
      71 |     });
      72 |
      73 |     test('negative hour and minutes both roll over', () => {

      at Object.<anonymous> (clock_testSuite.js:70:39)

  ● Clock › Creating a new clock with an initial time › negative hour and minutes both roll over

    expect(received).toEqual(expected) // deep equality

    Expected: "20:20"
    Received: "-4:-40"

      72 |
      73 |     test('negative hour and minutes both roll over', () => {
    > 74 |       expect(at(-25, -160).toString()).toEqual('20:20');
         |                                        ^
      75 |     });
      76 |
      77 |     test('negative hour and minutes both roll over continuously', () => {

      at Object.<anonymous> (clock_testSuite.js:74:40)

  ● Clock › Creating a new clock with an initial time › negative hour and minutes both roll over continuously

    expect(received).toEqual(expected) // deep equality

    Expected: "22:10"
    Received: "-2:-50"

      76 |
      77 |     test('negative hour and minutes both roll over continuously', () => {
    > 78 |       expect(at(-121, -5810).toString()).toEqual('22:10');
         |                                          ^
      79 |     });
      80 |
      81 |     describe('Adding and subtracting minutes', () => {

      at Object.<anonymous> (clock_testSuite.js:78:42)

  ● Clock › Creating a new clock with an initial time › Construct two separate clocks, set times, test if they are equal › clocks with negative hour

    expect(received).toBeTruthy()

    Received: false

      231 |
      232 |       test('clocks with negative hour', () => {
    > 233 |         expect(at(22, 40).equals(at(-2, 40))).toBeTruthy();
          |                                               ^
      234 |       });
      235 |
      236 |       test('clocks with negative hour that wraps', () => {

      at Object.<anonymous> (clock_testSuite.js:233:47)

  ● Clock › Creating a new clock with an initial time › Construct two separate clocks, set times, test if they are equal › clocks with negative hour that wraps

    expect(received).toBeTruthy()

    Received: false

      235 |
      236 |       test('clocks with negative hour that wraps', () => {
    > 237 |         expect(at(17, 3).equals(at(-31, 3))).toBeTruthy();
          |                                              ^
      238 |       });
      239 |
      240 |       test('clocks with negative hour that wraps multiple times', () => {

      at Object.<anonymous> (clock_testSuite.js:237:46)

  ● Clock › Creating a new clock with an initial time › Construct two separate clocks, set times, test if they are equal › clocks with negative hour that wraps multiple times

    expect(received).toBeTruthy()

    Received: false

      239 |
      240 |       test('clocks with negative hour that wraps multiple times', () => {
    > 241 |         expect(at(13, 49).equals(at(-83, 49))).toBeTruthy();
          |                                                ^
      242 |       });
      243 |
      244 |       test('clocks with minute overflow', () => {

      at Object.<anonymous> (clock_testSuite.js:241:48)

  ● Clock › Creating a new clock with an initial time › Construct two separate clocks, set times, test if they are equal › clocks with negative minute that wraps

    expect(received).toBeTruthy()

    Received: false

      255 |
      256 |       test('clocks with negative minute that wraps', () => {
    > 257 |         expect(at(4, 10).equals(at(5, -1490))).toBeTruthy();
          |                                                ^
      258 |       });
      259 |
      260 |       test('clocks with negative minute that wraps multiple times', () => {

      at Object.<anonymous> (clock_testSuite.js:257:48)

  ● Clock › Creating a new clock with an initial time › Construct two separate clocks, set times, test if they are equal › clocks with negative minute that wraps multiple times

    expect(received).toBeTruthy()

    Received: false

      259 |
      260 |       test('clocks with negative minute that wraps multiple times', () => {
    > 261 |         expect(at(6, 15).equals(at(6, -4305))).toBeTruthy();
          |                                                ^
      262 |       });
      263 |
      264 |       test('clocks with negative hours and minutes', () => {

      at Object.<anonymous> (clock_testSuite.js:261:48)

  ● Clock › Creating a new clock with an initial time › Construct two separate clocks, set times, test if they are equal › clocks with negative hours and minutes

    expect(received).toBeTruthy()

    Received: false

      263 |
      264 |       test('clocks with negative hours and minutes', () => {
    > 265 |         expect(at(7, 32).equals(at(-12, -268))).toBeTruthy();
          |                                                 ^
      266 |       });
      267 |
      268 |       test('clocks with negative hours and minutes that wrap', () => {

      at Object.<anonymous> (clock_testSuite.js:265:49)

  ● Clock › Creating a new clock with an initial time › Construct two separate clocks, set times, test if they are equal › clocks with negative hours and minutes that wrap

    expect(received).toBeTruthy()

    Received: false

      267 |
      268 |       test('clocks with negative hours and minutes that wrap', () => {
    > 269 |         expect(at(18, 7).equals(at(-54, -11513))).toBeTruthy();
          |                                                   ^
      270 |       });
      271 |     });
      272 |   });

      at Object.<anonymous> (clock_testSuite.js:269:51)

Test Suites: 1 failed, 1 total
Tests:       14 failed, 36 passed, 50 total
Snapshots:   0 total
Time:        1.84 s
Ran all test suites.
Command exited with non-zero status 1
	Command being timed: "node --experimental-vm-modules ./node_modules/.bin/jest --config=jest.config.js --testMatch=**/*testSuite.js --silent=false"
	User time (seconds): 0.48
	System time (seconds): 0.15
	Percent of CPU this job got: 12%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:05.06
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 85116
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 15
	Minor (reclaiming a frame) page faults: 15130
	Voluntary context switches: 8654
	Involuntary context switches: 945
	Swaps: 0
	File system inputs: 1384
	File system outputs: 16
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
