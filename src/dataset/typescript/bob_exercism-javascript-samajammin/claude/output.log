{"numFailedTestSuites":1,"numFailedTests":1,"numPassedTestSuites":0,"numPassedTests":16,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":17,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1754855734201,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Bob"],"duration":64,"failureDetails":[],"failureMessages":[],"fullName":"Bob stating something","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"stating something"},{"ancestorTitles":["Bob"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Bob shouting","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shouting"},{"ancestorTitles":["Bob"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Bob asking a question","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"asking a question"},{"ancestorTitles":["Bob"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Bob talking forcefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"talking forcefully"},{"ancestorTitles":["Bob"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Bob using acronyms in regular speech","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"using acronyms in regular speech"},{"ancestorTitles":["Bob"],"duration":106,"failureDetails":[{"matcherResult":{"actual":"Sure.","expected":"Whoa, chill out!","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: \"Whoa, chill out!\"\nReceived: \"Sure.\"","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: \"Whoa, chill out!\"\nReceived: \"Sure.\"\n    at Object.<anonymous> (/app/bob.test.ts:33:20)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"Bob forceful questions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"forceful questions"},{"ancestorTitles":["Bob"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Bob shouting numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shouting numbers"},{"ancestorTitles":["Bob"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Bob only numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"only numbers"},{"ancestorTitles":["Bob"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Bob question with only numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"question with only numbers"},{"ancestorTitles":["Bob"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Bob shouting with special characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shouting with special characters"},{"ancestorTitles":["Bob"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Bob shouting with umlauts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shouting with umlauts"},{"ancestorTitles":["Bob"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Bob calmly speaking about umlauts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"calmly speaking about umlauts"},{"ancestorTitles":["Bob"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Bob shouting with no exclamation mark","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shouting with no exclamation mark"},{"ancestorTitles":["Bob"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bob statement containing question mark","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"statement containing question mark"},{"ancestorTitles":["Bob"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Bob prattling on","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"prattling on"},{"ancestorTitles":["Bob"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bob silence","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"silence"},{"ancestorTitles":["Bob"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bob prolonged silence","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"prolonged silence"}],"endTime":1754855758037,"message":"  ● Bob › forceful questions\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"Whoa, chill out!\"\n    Received: \"Sure.\"\n\n      31 |   it('forceful questions', () => {\n      32 |     const result = bob.hey('WHAT THE HELL WERE YOU THINKING?');\n    > 33 |     expect(result).toEqual('Whoa, chill out!');\n         |                    ^\n      34 |   });\n      35 |\n      36 |   it('shouting numbers', () => {\n\n      at Object.<anonymous> (bob.test.ts:33:20)\n","name":"/app/bob.test.ts","startTime":1754855736152,"status":"failed","summary":""}],"wasInterrupted":false}
