{"numFailedTestSuites":1,"numFailedTests":15,"numPassedTestSuites":0,"numPassedTests":11,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":26,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1758208822716,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. zero","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"zero"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. arbitrary single byte","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"arbitrary single byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. largest single byte","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"largest single byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":5,"failureDetails":[{"matcherResult":{"actual":[1,128],"expected":[129,0],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   129,\n-   0,\n+   1,\n+   128,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   129,\n-   0,\n+   1,\n+   128,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:18:34)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. smallest double byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"smallest double byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":6,"failureDetails":[{"matcherResult":{"actual":[64,128],"expected":[192,0],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   192,\n-   0,\n+   64,\n+   128,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   192,\n-   0,\n+   64,\n+   128,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:22:36)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. arbitrary double byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"arbitrary double byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":0,"failureDetails":[{"matcherResult":{"actual":[127,255],"expected":[255,127],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   255,\n    127,\n+   255,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   255,\n    127,\n+   255,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:26:36)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. largest double byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"largest double byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":5,"failureDetails":[{"matcherResult":{"actual":[1,128,128],"expected":[129,128,0],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   129,\n+   1,\n+   128,\n    128,\n-   0,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   129,\n+   1,\n+   128,\n    128,\n-   0,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:30:36)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. smallest triple byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"smallest triple byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":0,"failureDetails":[{"matcherResult":{"actual":[64,128,128],"expected":[192,128,0],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   192,\n+   64,\n+   128,\n    128,\n-   0,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   192,\n+   64,\n+   128,\n    128,\n-   0,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:34:38)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. arbitrary triple byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"arbitrary triple byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":5,"failureDetails":[{"matcherResult":{"actual":[127,255,255],"expected":[255,255,127],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n+   127,\n    255,\n    255,\n-   127,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n+   127,\n    255,\n    255,\n-   127,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:38:38)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. largest triple byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"largest triple byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":0,"failureDetails":[{"matcherResult":{"actual":[1,128,128,128],"expected":[129,128,128,0],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   129,\n+   1,\n+   128,\n    128,\n    128,\n-   0,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   129,\n+   1,\n+   128,\n    128,\n    128,\n-   0,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:42:38)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. smallest quadruple byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"smallest quadruple byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":1,"failureDetails":[{"matcherResult":{"actual":[64,128,128,128],"expected":[192,128,128,0],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   192,\n+   64,\n+   128,\n    128,\n    128,\n-   0,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   192,\n+   64,\n+   128,\n    128,\n    128,\n-   0,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:46:39)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. arbitrary quadruple byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"arbitrary quadruple byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":0,"failureDetails":[{"matcherResult":{"actual":[127,255,255,255],"expected":[255,255,255,127],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n+   127,\n    255,\n    255,\n    255,\n-   127,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n+   127,\n    255,\n    255,\n    255,\n-   127,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:50:39)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. largest quadruple byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"largest quadruple byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":0,"failureDetails":[{"matcherResult":{"actual":[1,128,128,128,128],"expected":[129,128,128,128,0],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   129,\n+   1,\n+   128,\n    128,\n    128,\n    128,\n-   0,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   129,\n+   1,\n+   128,\n    128,\n    128,\n    128,\n-   0,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:54:40)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. smallest quintuple byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"smallest quintuple byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":0,"failureDetails":[{"matcherResult":{"actual":[15,248,128,128,128],"expected":[143,248,128,128,0],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   143,\n+   15,\n    248,\n+   128,\n    128,\n    128,\n-   0,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   143,\n+   15,\n    248,\n+   128,\n    128,\n    128,\n-   0,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:58:40)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. arbitrary quintuple byte","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"arbitrary quintuple byte"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":0,"failureDetails":[{"matcherResult":{"actual":[15,255,255,255,255],"expected":[143,255,255,255,127],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   143,\n+   15,\n+   255,\n    255,\n    255,\n    255,\n-   127,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n-   143,\n+   15,\n+   255,\n    255,\n    255,\n    255,\n-   127,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:62:40)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. maximum 32-bit integer input","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"maximum 32-bit integer input"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. two single-byte values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"two single-byte values"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":0,"failureDetails":[{"matcherResult":{"actual":[1,128,128,72,232,214],"expected":[129,128,0,200,232,86],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 4\n+ Received  + 4\n\n  Array [\n-   129,\n+   1,\n    128,\n-   0,\n-   200,\n+   128,\n+   72,\n    232,\n-   86,\n+   214,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 4\n+ Received  + 4\n\n  Array [\n-   129,\n+   1,\n    128,\n-   0,\n-   200,\n+   128,\n+   72,\n    232,\n-   86,\n+   214,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:70:46)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. two multi-byte values","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"two multi-byte values"},{"ancestorTitles":["VariableLengthQuantity","Encode a series of integers, producing a series of bytes."],"duration":2,"failureDetails":[{"matcherResult":{"actual":[64,128,72,232,214,127,255,255,255,0,127,255,1,128,128],"expected":[192,0,200,232,86,255,255,255,127,0,255,127,129,128,0],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 8\n+ Received  + 8\n\n  Array [\n-   192,\n-   0,\n-   200,\n+   64,\n+   128,\n+   72,\n    232,\n-   86,\n+   214,\n+   127,\n    255,\n    255,\n    255,\n-   127,\n    0,\n-   255,\n    127,\n-   129,\n+   255,\n+   1,\n    128,\n-   0,\n+   128,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 8\n+ Received  + 8\n\n  Array [\n-   192,\n-   0,\n-   200,\n+   64,\n+   128,\n+   72,\n    232,\n-   86,\n+   214,\n+   127,\n    255,\n    255,\n    255,\n-   127,\n    0,\n-   255,\n    127,\n-   129,\n+   255,\n+   1,\n    128,\n-   0,\n+   128,\n  ]\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:76:33)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Encode a series of integers, producing a series of bytes. many multi-byte values","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"many multi-byte values"},{"ancestorTitles":["VariableLengthQuantity","Decode a series of bytes, producing a series of integers."],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Decode a series of bytes, producing a series of integers. one byte","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"one byte"},{"ancestorTitles":["VariableLengthQuantity","Decode a series of bytes, producing a series of integers."],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Decode a series of bytes, producing a series of integers. two bytes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"two bytes"},{"ancestorTitles":["VariableLengthQuantity","Decode a series of bytes, producing a series of integers."],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Decode a series of bytes, producing a series of integers. three bytes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"three bytes"},{"ancestorTitles":["VariableLengthQuantity","Decode a series of bytes, producing a series of integers."],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Decode a series of bytes, producing a series of integers. four bytes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"four bytes"},{"ancestorTitles":["VariableLengthQuantity","Decode a series of bytes, producing a series of integers."],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Decode a series of bytes, producing a series of integers. maximum 32-bit integer","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"maximum 32-bit integer"},{"ancestorTitles":["VariableLengthQuantity","Decode a series of bytes, producing a series of integers."],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Decode a series of bytes, producing a series of integers. incomplete sequence causes error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"incomplete sequence causes error"},{"ancestorTitles":["VariableLengthQuantity","Decode a series of bytes, producing a series of integers."],"duration":12,"failureDetails":[{"matcherResult":{"message":"expect(received).toThrowError(expected)\n\nExpected substring: \"Incomplete sequence\"\n\nReceived function did not throw","pass":false}}],"failureMessages":["Error: expect(received).toThrowError(expected)\n\nExpected substring: \"Incomplete sequence\"\n\nReceived function did not throw\n    at Object.<anonymous> (/app/variable-length-quantity.test.ts:106:44)\n    at Promise.then.completed (/base/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/base/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/base/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/base/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/base/node_modules/jest-circus/build/run.js:121:9)\n    at run (/base/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/base/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/base/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/base/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"VariableLengthQuantity Decode a series of bytes, producing a series of integers. incomplete sequence causes error, even if value is zero","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"incomplete sequence causes error, even if value is zero"},{"ancestorTitles":["VariableLengthQuantity","Decode a series of bytes, producing a series of integers."],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"VariableLengthQuantity Decode a series of bytes, producing a series of integers. multiple values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"multiple values"}],"endTime":1758208826408,"message":"  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › smallest double byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n    -   129,\n    -   0,\n    +   1,\n    +   128,\n      ]\n\n      16 |\n      17 |     it('smallest double byte', () => {\n    > 18 |       expect(VLQ.encode([0x80])).toEqual([0x81, 0])\n         |                                  ^\n      19 |     })\n      20 |\n      21 |     it('arbitrary double byte', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:18:34)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › arbitrary double byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n    -   192,\n    -   0,\n    +   64,\n    +   128,\n      ]\n\n      20 |\n      21 |     it('arbitrary double byte', () => {\n    > 22 |       expect(VLQ.encode([0x2000])).toEqual([0xc0, 0])\n         |                                    ^\n      23 |     })\n      24 |\n      25 |     it('largest double byte', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:22:36)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › largest double byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   255,\n        127,\n    +   255,\n      ]\n\n      24 |\n      25 |     it('largest double byte', () => {\n    > 26 |       expect(VLQ.encode([0x3fff])).toEqual([0xff, 0x7f])\n         |                                    ^\n      27 |     })\n      28 |\n      29 |     it('smallest triple byte', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:26:36)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › smallest triple byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n    -   129,\n    +   1,\n    +   128,\n        128,\n    -   0,\n      ]\n\n      28 |\n      29 |     it('smallest triple byte', () => {\n    > 30 |       expect(VLQ.encode([0x4000])).toEqual([0x81, 0x80, 0])\n         |                                    ^\n      31 |     })\n      32 |\n      33 |     it('arbitrary triple byte', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:30:36)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › arbitrary triple byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n    -   192,\n    +   64,\n    +   128,\n        128,\n    -   0,\n      ]\n\n      32 |\n      33 |     it('arbitrary triple byte', () => {\n    > 34 |       expect(VLQ.encode([0x100000])).toEqual([0xc0, 0x80, 0])\n         |                                      ^\n      35 |     })\n      36 |\n      37 |     it('largest triple byte', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:34:38)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › largest triple byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    +   127,\n        255,\n        255,\n    -   127,\n      ]\n\n      36 |\n      37 |     it('largest triple byte', () => {\n    > 38 |       expect(VLQ.encode([0x1fffff])).toEqual([0xff, 0xff, 0x7f])\n         |                                      ^\n      39 |     })\n      40 |\n      41 |     it('smallest quadruple byte', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:38:38)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › smallest quadruple byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n    -   129,\n    +   1,\n    +   128,\n        128,\n        128,\n    -   0,\n      ]\n\n      40 |\n      41 |     it('smallest quadruple byte', () => {\n    > 42 |       expect(VLQ.encode([0x200000])).toEqual([0x81, 0x80, 0x80, 0])\n         |                                      ^\n      43 |     })\n      44 |\n      45 |     it('arbitrary quadruple byte', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:42:38)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › arbitrary quadruple byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n    -   192,\n    +   64,\n    +   128,\n        128,\n        128,\n    -   0,\n      ]\n\n      44 |\n      45 |     it('arbitrary quadruple byte', () => {\n    > 46 |       expect(VLQ.encode([0x8000000])).toEqual([0xc0, 0x80, 0x80, 0])\n         |                                       ^\n      47 |     })\n      48 |\n      49 |     it('largest quadruple byte', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:46:39)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › largest quadruple byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    +   127,\n        255,\n        255,\n        255,\n    -   127,\n      ]\n\n      48 |\n      49 |     it('largest quadruple byte', () => {\n    > 50 |       expect(VLQ.encode([0xfffffff])).toEqual([0xff, 0xff, 0xff, 0x7f])\n         |                                       ^\n      51 |     })\n      52 |\n      53 |     it('smallest quintuple byte', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:50:39)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › smallest quintuple byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n    -   129,\n    +   1,\n    +   128,\n        128,\n        128,\n        128,\n    -   0,\n      ]\n\n      52 |\n      53 |     it('smallest quintuple byte', () => {\n    > 54 |       expect(VLQ.encode([0x10000000])).toEqual([0x81, 0x80, 0x80, 0x80, 0])\n         |                                        ^\n      55 |     })\n      56 |\n      57 |     it('arbitrary quintuple byte', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:54:40)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › arbitrary quintuple byte\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n    -   143,\n    +   15,\n        248,\n    +   128,\n        128,\n        128,\n    -   0,\n      ]\n\n      56 |\n      57 |     it('arbitrary quintuple byte', () => {\n    > 58 |       expect(VLQ.encode([0xff000000])).toEqual([0x8f, 0xf8, 0x80, 0x80, 0])\n         |                                        ^\n      59 |     })\n      60 |\n      61 |     it('maximum 32-bit integer input', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:58:40)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › maximum 32-bit integer input\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n    -   143,\n    +   15,\n    +   255,\n        255,\n        255,\n        255,\n    -   127,\n      ]\n\n      60 |\n      61 |     it('maximum 32-bit integer input', () => {\n    > 62 |       expect(VLQ.encode([0xffffffff])).toEqual([0x8f, 0xff, 0xff, 0xff, 0x7f])\n         |                                        ^\n      63 |     })\n      64 |\n      65 |     it('two single-byte values', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:62:40)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › two multi-byte values\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 4\n    + Received  + 4\n\n      Array [\n    -   129,\n    +   1,\n        128,\n    -   0,\n    -   200,\n    +   128,\n    +   72,\n        232,\n    -   86,\n    +   214,\n      ]\n\n      68 |\n      69 |     it('two multi-byte values', () => {\n    > 70 |       expect(VLQ.encode([0x4000, 0x123456])).toEqual([0x81, 0x80, 0, 0xc8, 0xe8, 0x56])\n         |                                              ^\n      71 |     })\n      72 |\n      73 |     it('many multi-byte values', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:70:46)\n\n  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › many multi-byte values\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 8\n    + Received  + 8\n\n      Array [\n    -   192,\n    -   0,\n    -   200,\n    +   64,\n    +   128,\n    +   72,\n        232,\n    -   86,\n    +   214,\n    +   127,\n        255,\n        255,\n        255,\n    -   127,\n        0,\n    -   255,\n        127,\n    -   129,\n    +   255,\n    +   1,\n        128,\n    -   0,\n    +   128,\n      ]\n\n      74 |       const input = [0x2000, 0x123456, 0xfffffff, 0, 0x3fff, 0x4000]\n      75 |       const expected = [0xc0, 0, 0xc8, 0xe8, 0x56, 0xff, 0xff, 0xff, 0x7f, 0, 0xff, 0x7f, 0x81, 0x80, 0]\n    > 76 |       expect(VLQ.encode(input)).toEqual(expected)\n         |                                 ^\n      77 |     })\n      78 |   })\n      79 |\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:76:33)\n\n  ● VariableLengthQuantity › Decode a series of bytes, producing a series of integers. › incomplete sequence causes error, even if value is zero\n\n    expect(received).toThrowError(expected)\n\n    Expected substring: \"Incomplete sequence\"\n\n    Received function did not throw\n\n      104 |\n      105 |     it('incomplete sequence causes error, even if value is zero', () => {\n    > 106 |       expect(() => { VLQ.decode([0x80]) }).toThrowError('Incomplete sequence')\n          |                                            ^\n      107 |     })\n      108 |\n      109 |     it('multiple values', () => {\n\n      at Object.<anonymous> (variable-length-quantity.test.ts:106:44)\n","name":"/app/variable-length-quantity.test.ts","startTime":1758208823146,"status":"failed","summary":""}],"wasInterrupted":false}
