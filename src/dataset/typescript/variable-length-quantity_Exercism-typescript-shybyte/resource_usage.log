FAIL ./variable-length-quantity.test.ts
  VariableLengthQuantity
    Encode a series of integers, producing a series of bytes.
      ✓ zero (7 ms)
      ✓ arbitrary single byte
      ✓ largest single byte
      ✕ smallest double byte (5 ms)
      ✕ arbitrary double byte (6 ms)
      ✕ largest double byte
      ✕ smallest triple byte (5 ms)
      ✕ arbitrary triple byte
      ✕ largest triple byte (5 ms)
      ✕ smallest quadruple byte
      ✕ arbitrary quadruple byte (1 ms)
      ✕ largest quadruple byte
      ✕ smallest quintuple byte
      ✕ arbitrary quintuple byte
      ✕ maximum 32-bit integer input
      ✓ two single-byte values (3 ms)
      ✕ two multi-byte values
      ✕ many multi-byte values (2 ms)
    Decode a series of bytes, producing a series of integers.
      ✓ one byte
      ✓ two bytes
      ✓ three bytes
      ✓ four bytes
      ✓ maximum 32-bit integer
      ✓ incomplete sequence causes error (11 ms)
      ✕ incomplete sequence causes error, even if value is zero (12 ms)
      ✓ multiple values

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › smallest double byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   129,
    -   0,
    +   1,
    +   128,
      ]

      16 |
      17 |     it('smallest double byte', () => {
    > 18 |       expect(VLQ.encode([0x80])).toEqual([0x81, 0])
         |                                  ^
      19 |     })
      20 |
      21 |     it('arbitrary double byte', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:18:34)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › arbitrary double byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   192,
    -   0,
    +   64,
    +   128,
      ]

      20 |
      21 |     it('arbitrary double byte', () => {
    > 22 |       expect(VLQ.encode([0x2000])).toEqual([0xc0, 0])
         |                                    ^
      23 |     })
      24 |
      25 |     it('largest double byte', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:22:36)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › largest double byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
    -   255,
        127,
    +   255,
      ]

      24 |
      25 |     it('largest double byte', () => {
    > 26 |       expect(VLQ.encode([0x3fff])).toEqual([0xff, 0x7f])
         |                                    ^
      27 |     })
      28 |
      29 |     it('smallest triple byte', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:26:36)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › smallest triple byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   129,
    +   1,
    +   128,
        128,
    -   0,
      ]

      28 |
      29 |     it('smallest triple byte', () => {
    > 30 |       expect(VLQ.encode([0x4000])).toEqual([0x81, 0x80, 0])
         |                                    ^
      31 |     })
      32 |
      33 |     it('arbitrary triple byte', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:30:36)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › arbitrary triple byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   192,
    +   64,
    +   128,
        128,
    -   0,
      ]

      32 |
      33 |     it('arbitrary triple byte', () => {
    > 34 |       expect(VLQ.encode([0x100000])).toEqual([0xc0, 0x80, 0])
         |                                      ^
      35 |     })
      36 |
      37 |     it('largest triple byte', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:34:38)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › largest triple byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
    +   127,
        255,
        255,
    -   127,
      ]

      36 |
      37 |     it('largest triple byte', () => {
    > 38 |       expect(VLQ.encode([0x1fffff])).toEqual([0xff, 0xff, 0x7f])
         |                                      ^
      39 |     })
      40 |
      41 |     it('smallest quadruple byte', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:38:38)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › smallest quadruple byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   129,
    +   1,
    +   128,
        128,
        128,
    -   0,
      ]

      40 |
      41 |     it('smallest quadruple byte', () => {
    > 42 |       expect(VLQ.encode([0x200000])).toEqual([0x81, 0x80, 0x80, 0])
         |                                      ^
      43 |     })
      44 |
      45 |     it('arbitrary quadruple byte', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:42:38)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › arbitrary quadruple byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   192,
    +   64,
    +   128,
        128,
        128,
    -   0,
      ]

      44 |
      45 |     it('arbitrary quadruple byte', () => {
    > 46 |       expect(VLQ.encode([0x8000000])).toEqual([0xc0, 0x80, 0x80, 0])
         |                                       ^
      47 |     })
      48 |
      49 |     it('largest quadruple byte', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:46:39)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › largest quadruple byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
    +   127,
        255,
        255,
        255,
    -   127,
      ]

      48 |
      49 |     it('largest quadruple byte', () => {
    > 50 |       expect(VLQ.encode([0xfffffff])).toEqual([0xff, 0xff, 0xff, 0x7f])
         |                                       ^
      51 |     })
      52 |
      53 |     it('smallest quintuple byte', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:50:39)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › smallest quintuple byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   129,
    +   1,
    +   128,
        128,
        128,
        128,
    -   0,
      ]

      52 |
      53 |     it('smallest quintuple byte', () => {
    > 54 |       expect(VLQ.encode([0x10000000])).toEqual([0x81, 0x80, 0x80, 0x80, 0])
         |                                        ^
      55 |     })
      56 |
      57 |     it('arbitrary quintuple byte', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:54:40)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › arbitrary quintuple byte

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   143,
    +   15,
        248,
    +   128,
        128,
        128,
    -   0,
      ]

      56 |
      57 |     it('arbitrary quintuple byte', () => {
    > 58 |       expect(VLQ.encode([0xff000000])).toEqual([0x8f, 0xf8, 0x80, 0x80, 0])
         |                                        ^
      59 |     })
      60 |
      61 |     it('maximum 32-bit integer input', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:58:40)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › maximum 32-bit integer input

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   143,
    +   15,
    +   255,
        255,
        255,
        255,
    -   127,
      ]

      60 |
      61 |     it('maximum 32-bit integer input', () => {
    > 62 |       expect(VLQ.encode([0xffffffff])).toEqual([0x8f, 0xff, 0xff, 0xff, 0x7f])
         |                                        ^
      63 |     })
      64 |
      65 |     it('two single-byte values', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:62:40)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › two multi-byte values

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

      Array [
    -   129,
    +   1,
        128,
    -   0,
    -   200,
    +   128,
    +   72,
        232,
    -   86,
    +   214,
      ]

      68 |
      69 |     it('two multi-byte values', () => {
    > 70 |       expect(VLQ.encode([0x4000, 0x123456])).toEqual([0x81, 0x80, 0, 0xc8, 0xe8, 0x56])
         |                                              ^
      71 |     })
      72 |
      73 |     it('many multi-byte values', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:70:46)

  ● VariableLengthQuantity › Encode a series of integers, producing a series of bytes. › many multi-byte values

    expect(received).toEqual(expected) // deep equality

    - Expected  - 8
    + Received  + 8

      Array [
    -   192,
    -   0,
    -   200,
    +   64,
    +   128,
    +   72,
        232,
    -   86,
    +   214,
    +   127,
        255,
        255,
        255,
    -   127,
        0,
    -   255,
        127,
    -   129,
    +   255,
    +   1,
        128,
    -   0,
    +   128,
      ]

      74 |       const input = [0x2000, 0x123456, 0xfffffff, 0, 0x3fff, 0x4000]
      75 |       const expected = [0xc0, 0, 0xc8, 0xe8, 0x56, 0xff, 0xff, 0xff, 0x7f, 0, 0xff, 0x7f, 0x81, 0x80, 0]
    > 76 |       expect(VLQ.encode(input)).toEqual(expected)
         |                                 ^
      77 |     })
      78 |   })
      79 |

      at Object.<anonymous> (variable-length-quantity.test.ts:76:33)

  ● VariableLengthQuantity › Decode a series of bytes, producing a series of integers. › incomplete sequence causes error, even if value is zero

    expect(received).toThrowError(expected)

    Expected substring: "Incomplete sequence"

    Received function did not throw

      104 |
      105 |     it('incomplete sequence causes error, even if value is zero', () => {
    > 106 |       expect(() => { VLQ.decode([0x80]) }).toThrowError('Incomplete sequence')
          |                                            ^
      107 |     })
      108 |
      109 |     it('multiple values', () => {

      at Object.<anonymous> (variable-length-quantity.test.ts:106:44)

Test Suites: 1 failed, 1 total
Tests:       15 failed, 11 passed, 26 total
Snapshots:   0 total
Time:        3.715 s
Ran all test suites.
Test results written to: output.log
Command exited with non-zero status 1
	Command being timed: "npx jest --json --outputFile=output.log"
	User time (seconds): 1.57
	System time (seconds): 0.10
	Percent of CPU this job got: 31%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:05.33
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 226724
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 17
	Minor (reclaiming a frame) page faults: 66921
	Voluntary context switches: 3458
	Involuntary context switches: 6721
	Swaps: 0
	File system inputs: 44288
	File system outputs: 112
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
