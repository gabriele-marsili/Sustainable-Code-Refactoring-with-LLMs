FAIL ./two-bucket.test.ts
  TwoBucket
    works for input of 3, 5, 1
      ✕ starting with bucket one (2 ms)
      ✕ starting with bucket two (1 ms)
    works for input of 7, 11, 2
      ✕ starting with bucket one
      ✕ starting with bucket two

  ● TwoBucket › works for input of 3, 5, 1 › starting with bucket one

    expect(received).toEqual(expected) // deep equality

    Expected: 5
    Received: 0

      12 |       expect(twoBucket.moves()).toEqual(4) // includes the first fill
      13 |       expect(twoBucket.goalBucket).toEqual('one') // which bucket should end up with the desired # of liters
    > 14 |       expect(twoBucket.otherBucket).toEqual(5) // leftover value in the "other" bucket once the goal has been reached
         |                                     ^
      15 |     })
      16 |
      17 |     test('starting with bucket two', () => {

      at Object.<anonymous> (two-bucket.test.ts:14:37)

  ● TwoBucket › works for input of 3, 5, 1 › starting with bucket two

    expect(received).toEqual(expected) // deep equality

    Expected: 3
    Received: 0

      20 |       expect(twoBucket.moves()).toEqual(8)
      21 |       expect(twoBucket.goalBucket).toEqual('two')
    > 22 |       expect(twoBucket.otherBucket).toEqual(3)
         |                                     ^
      23 |     })
      24 |   })
      25 |

      at Object.<anonymous> (two-bucket.test.ts:22:37)

  ● TwoBucket › works for input of 7, 11, 2 › starting with bucket one

    expect(received).toEqual(expected) // deep equality

    Expected: 11
    Received: 0

      34 |       expect(twoBucket.moves()).toEqual(14)
      35 |       expect(twoBucket.goalBucket).toEqual('one')
    > 36 |       expect(twoBucket.otherBucket).toEqual(11)
         |                                     ^
      37 |     })
      38 |
      39 |     test('starting with bucket two', () => {

      at Object.<anonymous> (two-bucket.test.ts:36:37)

  ● TwoBucket › works for input of 7, 11, 2 › starting with bucket two

    expect(received).toEqual(expected) // deep equality

    Expected: 7
    Received: 0

      42 |       expect(twoBucket.moves()).toEqual(18)
      43 |       expect(twoBucket.goalBucket).toEqual('two')
    > 44 |       expect(twoBucket.otherBucket).toEqual(7)
         |                                     ^
      45 |     })
      46 |   })
      47 | })

      at Object.<anonymous> (two-bucket.test.ts:44:37)

Test Suites: 1 failed, 1 total
Tests:       4 failed, 4 total
Snapshots:   0 total
Time:        1.469 s
Ran all test suites.
Test results written to: output.log
Command exited with non-zero status 1
	Command being timed: "npx jest --json --outputFile=output.log"
	User time (seconds): 1.59
	System time (seconds): 0.12
	Percent of CPU this job got: 78%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:02.18
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 221692
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 65415
	Voluntary context switches: 2623
	Involuntary context switches: 6714
	Swaps: 0
	File system inputs: 30120
	File system outputs: 80
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
