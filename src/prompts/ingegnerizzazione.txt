‚úÖ Struttura comune ai tre prompt
Ruolo del modello:
Tutti i prompt iniziano assegnando al modello il ruolo di un software engineer con esperienza.

Contesto del codice:
Tutti specificano che verr√† fornito un code snippet delimitato da triple backtick (```)

Obiettivo (Task):
Ottimizzare il codice preservando il comportamento e le interfacce/firme.

Linee guida sull‚Äôottimizzazione:

Migliorare le performance a runtime

Ridurre l‚Äôuso di risorse (CPU, memoria)

Applicare principi di sustainable software engineering

Output richiesto:
Il codice ottimizzato senza spiegazioni.

Differenze tra le versioni -> img


‚úÖ Punti di forza e debolezza per versione
üîπ V1 ‚Äì Diretta e sintetica
Punti di forza:

Chiarezza: istruzioni concise e numerate.

Redundancy utile: enfatizza non modificare le firme due volte.

Specifica chiaramente gli obiettivi in ordine di priorit√†.

Debolezze:

Manca riferimento al linguaggio specifico (non usa {language}).

Tono pi√π "tecnico" e meno naturale.

Meno enfasi su manutenibilit√† del codice (focus solo su performance e sostenibilit√†).

Ambiguit√†:

L‚Äôuso di "interface" + "function signatures" pu√≤ sembrare ridondante o ambiguo.

üîπ V2 ‚Äì Pi√π naturale e contestualizzata
Punti di forza:

Linguaggio pi√π naturale e fluido.

Utilizza {language} per contestualizzare meglio il codice.

Menzione chiara dell‚Äôassenza di test.

Mantiene un buon bilanciamento tra performance, sostenibilit√† e struttura.

Debolezze:

Meno formale e strutturato rispetto a V1 e V3 (niente elenco numerato).

Manca enfasi su ‚Äúclean code‚Äù o manutenibilit√†.

Ambiguit√†:

"Preserve...functionality and function signatures" √® chiaro, ma meno preciso del ‚Äúoriginal behavior and interface‚Äù (V1) o del ‚Äúdo not alter...interface‚Äù (V3).

üîπ V3 ‚Äì Pi√π autorevole e sofisticato
Punti di forza:

Profilo tecnico elevato: specifica "senior-level", "expertise in sustainable computing".

Enfasi su manutenibilit√†, clean code, e refactoring, non presente in V1 e V2.

Tono professionale, pi√π adatto a prompt complessi o enterprise-grade.

Debolezze:

Non menziona l‚Äôassenza di test (potrebbe causare confusione).

Pi√π verboso; meno adatto a contesti dove la concisione √® essenziale.

Non menziona esplicitamente le ‚Äúfunction signatures‚Äù (rischio di ambiguit√† sul vincolo dell‚Äôinterfaccia).

Ambiguit√†:

‚ÄúPreserve...interface‚Äù √® meno esplicito di ‚Äúdo not alter function signatures‚Äù ‚Üí potrebbe essere interpretato con pi√π libert√†.

üìå Considerazioni conclusive
V1 √® adatta quando serve un prompt diretto e preciso, con priorit√† chiara sulle performance e rispetto rigoroso dell‚Äôinterfaccia.

V2 √® pi√π flessibile e naturale, ottima per prompt multi-lingua, grazie al placeholder {language} e al linguaggio scorrevole.

V3 √® ideale per casi avanzati dove si vuole ottenere codice sostenibile e manutenibile, ma introduce lievi ambiguit√† e maggiore verbosit√†.

-------------------------

In tutti e 3 i prompts per prima cosa determino il ruolo assoiciato al contesto, ossia ingegnere del software con esperienza. A riguardo, nella V3 del prompt vi sono alcune modifiche, quali la specializzazione del livello (senior-level) e il campo di esperienza (sustainable computing and performance optimization).

Successivamente viene specificato il contesto : snippet di codice e relativo linguaggio, ponendo attenzione sul fatto che sia delimitato da triplici apici  (```).
Nella V3, a differenza delle altre versioni, non viene specificato che il codice NON include i tests.

Di seguito viene chiarito l'obiettivo (task) : migliorare il codice fornito mantenendo le funzionalit√†.Riguardo ci√≤ le principali differenze tra versioni sono : 
- V1 : "snippet" al posto di "code", mantenere "comportamento ed interfacce" (specificando firme delle funzioni), viene chiesto anche di ridurre l'energia consumata a runtime.
- V2 : "code" al posto di "snippet", mantenere "funzionalit√† e firme delle funzioni", viene chiesto anche di ridurre l'energia consumata a runtime.
- V3 : riferimento a "code snippet" (it), mantenere "funzionali√† e interfacce", nessuna specifica sulle firme delle funzioni n√© sulla riduzione dell'energia a runtime.

In tutte le versioni viene poi allegato lo snippet di codice da migliroare tra tripli apici.

Vengono poi inseriti una serie di (keywords diverse per ogni versione) : 
- V1 : criteri, quali tempo d'esecuzione, uso di risorse (memoria e CPU), non modificare le firme delle funzioni (ripetuto) e seguire best practices (guidelines e patterns) relative all'ingegneria del software sostenibile
- V2 : guidelines di ottimizzazione, quali migliorare l'efficienza d'esecuzione minimizzando il tempo d'esecuzione, ridurre l'uso di risorse (memoria e CPU),applicare principi di ingegneria del softwar sostenibile 
- V3 : istruzioni, quali fare refactoring del codice per migliorare le performance a runtime riducendo il consumo di energia, limitare l'uso delle risorse quando possibile, preservare nomi e firme di funzioni, applicare pratiche di coding manutenibili in linea con l'ingegneria del software sostenibile.

Infine, in tutte le versioni viene richiesto in output solamente il codice.

