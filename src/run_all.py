import json
import subprocess
import os
import time
from utility_dir import utility_paths
from dataclasses import dataclass, field
from typing import Dict, List, Tuple
import atexit


# Clusters gi√† processati
clusters_already_processed_base = [
    "raindrops",
    "leap",
    "pangram",
    "bob",
    "reverse_all_lists",
    "elons_toy_car",
    "pig_latin_translator",
    "find_el_smaller_left_bigger_right",
    "queens_problem",
    "three_sum",
    "check_if_point_inside_polygon",
    "find_two_missing_numbers",
    "a0059spiralmatrixii",
    "a0094binarytreeinordertraversal",
    "the_farm",
    "sorting_room",
    "a0138copylistwithrandompointer",
    "election_day",
    "a0152maximumproductsubarray",
    "min_cost_coloring",
    "a0116populatingnextrightpointersineachnode",
    "unique_paths",
    "bottle_song",
    "container_with_most_water",
    "linked_list_cycle",
    "valid_parentheses",
    "random_sample",
    "check_if_two_rectangles_overlap",
    "a0201bitwiseandofnumbersrange",
    "chaitanas_colossal_coaster",
    "a0144binarytreepreordertraversal",
    "longest_common_prefix",
    "count_divisibles_in_range",
    "queen",
    "nth_fibonacci_number",
    "calculate_area_of_polygon",
    "log_levels_alt",
    "party_robot",
    "meetup_schedule",
    "sum_non_adjecent",
    "card_games",
    "zebra_puzzle",
    "dn_dcharacter",
    "complex_numbers",
    "count_positives",
    "a0215kthlargestelementinanarray",
    "power_set",
    "squeaky_clean",
    "need_for_speed",
    "rail_fence_cipher",
    "a0120triangle",
    "census",
    "reverse_vowels",
    "basic_calculator",
    "prime_calculator",
    "smallest_multiple",
    "a0074search2dmatrix",
    "a0055jumpgame",
    "blackjack",
    "best_time_to_buy_and_sell_stock",
    "cars_assemble",
    "welcome_to_tech_palace",
    "summary_ranges",
    "lasagna",
    "a0064minimumpathsum",
    "min_swaps",
    "a0153findminimuminrotatedsortedarray",
    "majority_element",
    "a0114flattenbinarytreetolinkedlist",
    "killer_sudoku_helper",
    "a0147insertionsortlist",
    "meteorology",
    "find_first_missing_positive",
    "a0127wordladder",
    "ledger",
    "a0207courseschedule",
    "forth",
    "palindrome_integer",
    "tournament",
    "a0092reverselinkedlistii",
    "valid_anagram",
    "longest_common_subsequence",
    "mixed_juices",
    "a0056mergeintervals",
    "card_tricks",
    "book_store",
    "a0109convertsortedlisttobinarysearchtree",
    "resistor_color_enum",
    "snakes_and_ladders",
    "freelancer_rates",
    "making_the_grade",
    "bowling",
    "a0075sortcolors",
    "log_levels",
    "number_of_islands",
    "merge_intervals",
    "debug_cpp_entries_1",
    "largest_series_product_calculator",
    "valid_sudoku",
    "longest_palindromic_substring",
    "river_sizes",
    "a0131palindromepartitioning",
    "minimum_window_substring",
    "reverse_integer",
    "savings_account",
    "little_sisters_vocab",
    "bank_account_action_invalid_exception",
    "error_handling",
    "find_peak_element",
    "a0001twosum",
    "a0162findpeakelement",
    "diamond_printer",
    "interest_is_interesting",
    "swap_first_and_last_word",
    "little_sisters_essay",
    "two_sum",
    "a0151reversewordsinastring",
    "a0000blank",
    "product_of_array_except_self",
    "a0213houserobberii",
    "flatten_deep_list",
    "lucky_numbers",
    "weather_forecast",
    "grep",
    "secret_handshake",
    "merge_sorted_array",
    "reverse_string",
    "find_one_missing_number",
    "evaluate_reverse_polish_notation",
    "rotate_array",
    "a0089graycode",
    "a0133clonegraph",
    "postfix_evaluate",
    "parsing_log_files",
    "change",
    "a0143reorderlist",
    "a0093restore_ip_addresses",
    "bob",
    "candy",
    "a0062uniquepaths",
    "permutation_in_string",
    "airport_robot",
    "a0199binarytreerightsideview",
    "odd_sum",
    "bowling_game_log",
    "tree_building",
    "a0102binarytreelevelordertraversal",
    "simple_linked_list",
    "ransom_note",
    "annalyns_infiltration",
    "letter_combinations",
    "a0073setmatrixzeros",
    "a0098validatebinarysearchtree",
    "yacht",
    "minimum_absolute_difference_in_bst",
    "animal_magic",
    "poker",
    "climbing_staircase",
    "find_busiest_interval",
    "a0079wordsearch",
    "a0096uniquebinarysearchtrees",
    "secrets",
    "find_el_where_k_greater_or_equal",
    "pangram",
    "word_break",
    "a0148sortlist",
    "encode_and_decode_strings",
    "gotta_snatch_em_all",
    "a0130surroundedregions",
    "paasio",
    "find_missing_number_in_second_array",
    "ghost_gobble_arcade_game",
    "a0071simplitypath",
    "a0146lrucache",
    "a0086partitionlist",
    "pythagorean_triplet",
    "sort_rgb_array",
    "count_consecutive_sums",
    "a0082removeduplicatesfromsortedlistii",
    "count_triplets_with_sum_k",
    "a0103binarytreezigzaglevelordertraversal",
    "a0134gasstation",
    "valid_palindrome",
    "a0165compareversionnumbers",
    "guidos_gorgeous_lasagna",
    "a0095uniquebinarysearchtreesii",
    "chessboard",
    "high_score_board",
    "a0200numberofislands",
    "logs_logs_logs",
    "two_sum_ii_input_array_is_sorted",
    "a0105constructbinarytreefrompreorderandinordertraversal",
    "state_of_tic_tac_toe",
    "a0210coursescheduleii",
    "pig_latin",
    "sliding_window_maximum",
    "a0061rotatelist",
    "word_search",
    "a0080removeduplicatesfromsortedarrayii",
    "longest_increasing_subarray",
    "difference_of_squares_calculator",
    "power",
    "fancy_sequence",
    "scale_generator",
    "a0179largestnumber",
    "a0090subsetsii",
    "anagram_indices",
    "jedliks_toy_car",
    "parallel_letter_frequency",
    "armstrong_numbers",
    "reverse_ascending_sublists",
    "pov",
    "a0054spiralmatrix",
    "a0142linkedlistcycleii",
    "pangram_checker",
    "luhn_validator",
    "ordered_digits",
    "find_min_path",
    "set_matrix_zeroes",
    "raindrops",
    "split_coins",
    "crypto_square",
    "a0150evaluatereversepolishnotation",
    "a0209minimumsizesubarraysum",
    "a0208implementtrieprefixtree",
    "a0091decodeways",
    "a0077combinations",
    "captains_log",
    "a0129sumroottoleafnumbers",
    "a0187repeateddnasequences",
    "contains_duplicate",
    "protein_translator",
    "booking_up_for_beauty",
    "find_element_range_sorted_array",
    "elons_toys",
    "find_unpaired",
    "a0216combination_sumiii",
    "football_match_reports",
    "shuffle_array",
    "minimum_size_subarray_sum",
    "count_ip_addresses",
    "kth_smallest",
    "proverb",
    "a0211addandsearchworddatastructuredesign",
    "a0063uniquepathsii",
    "flatten_array",
    "min_stack",
    "longest_substring_without_repeating_characters",
    "currency_exchange",
    "optical_character_reader",
    "reverse_array",
    "diffie_hellman",
    "gross_store",
    "longest_consecutive_sequence",
    "dominoes",
    "a0060permutationsequence",
    "maximum_depth_of_binary_tree",
    "minesweeper_board",
    "a0166fractiontorecurringdecimal",
    "jump_game",
    "variable_length_quantity",
    "a0078subsets",
    "binary_tree_right_side_view",
    "reverse_words_in_sentence",
    "a0113pathsumii",
    "salary_calculator",
    "search_2d_matrix",
    "markdown",
    "spiral_matrix_builder",
    "leap",
    "longest_repeating_character_replacement",
    "expenses",
    "knapsack",
    "a0139wordbreak",
    "perfect_rectangle",
    "twofer",
    "resistor_color_trio",
]
clusters_already_processed_llm = [
    "raindrops",
    "leap",
    "pangram",
    "bob",
    "a0098validatebinarysearchtree",
    "variable_length_quantity",
    "lasagna",
    "crypto_square",
    "square_root",
    "freelancer_rates",
    "raindrops",
    "a0093restore_ip_addresses",
    "strain",
    "leap",
    "a0165compareversionnumbers",
    "bracket_push",
    "power",
    "diamond_printer",
    "rail_fence_cipher",
    "valid_anagram",
    "queen_attack",
    "flatten_array",
    "secrets",
    "state_of_tic_tac_toe",
    "meetup",
    "squeaky_clean",
    "a0211addandsearchworddatastructuredesign",
    "weather_forecast",
    "a0152maximumproductsubarray",
    "difference_of_squares",
    "octal",
    "find_peak_element",
    "binary_tree_right_side_view",
    "a0096uniquebinarysearchtrees",
    "protein_translator",
    "rotational_cipher",
    "a0216combination_sumiii",
    "luhn",
    "sort_rgb_array",
    "bowling",
    "find_missing_number_in_second_array",
    "gotta_snatch_em_all",
    "custom_set",
    "merge_sorted_array",
    "a0199binarytreerightsideview",
    "summary_ranges",
    "spiral_traversal",
    "candy",
    "need_for_speed",
    "hamming",
    "a0061rotatelist",
    "contains_duplicate",
    "encode_and_decode_strings",
    "longest_palindromic_substring",
    "rectangles",
    "two_bucket",
    "dn_dcharacter",
    "a0056mergeintervals",
    "a0208implementtrieprefixtree",
    "a0146lrucache",
    "a0095uniquebinarysearchtreesii",
    "a0113pathsumii",
    "two_sum_ii_input_array_is_sorted",
    "lucky_numbers",
    "a0129sumroottoleafnumbers",
    "dnd_character",
    "card_tricks",
    "scramblies",
    "two_sum",
    "isogram",
    "a0094binarytreeinordertraversal",
    "find_el_smaller_left_bigger_right",
    "maximum_depth_of_binary_tree",
    "pangram",
    "nth_prime",
    "acronym",
    "majority_element",
    "salary_calculator",
    "atbash_cipher",
    "postfix_evaluate",
    "a0144binarytreepreordertraversal",
    "reverse_string",
    "ransom_note",
    "proverb",
    "log_levels",
    "run_length_encoding",
    "pangram_checker",
    "grade_school",
    "climbing_staircase",
    "a0133clonegraph",
    "book_store",
    "tree_building",
    "poker",
    "minimum_window_substring",
    "annalyns_infiltration",
    "collatz_conjecture",
    "eliuds_eggs",
    "human_readable_numbers.test.js",
    "connect",
    "killer_sudoku_helper",
    "a0073setmatrixzeros",
    "grains",
    "reverse_array",
    "beer_song",
    "gross_store",
    "a0151reversewordsinastring",
    "bottle_song",
    "high_score_board",
    "rational_numbers",
    "a0090subsetsii",
    "pascals_triangle",
    "a0064minimumpathsum",
    "twofer",
    "split_coins",
    "hashtag_generator",
    "a0131palindromepartitioning",
    "anagram",
    "simple_linked_list",
    "all_your_base",
    "complex_numbers",
    "vehicle_purchase",
    "word_count",
    "elons_toys",
    "count_ip_addresses",
    "two_fer",
    "tournament",
    "scale_generator",
    "a0109convertsortedlisttobinarysearchtree",
    "a0063uniquepathsii",
    "gigasecond",
    "evaluate_reverse_polish_notation",
    "odd_sum",
    "a0086partitionlist",
    "bank_account_action_invalid_exception",
    "rna_transcription",
    "set_matrix_zeroes",
    "nth_fibonacci_number",
    "clock",
    "a0143reorderlist",
    "kth_smallest",
    "dominoes",
    "longest_repeating_character_replacement",
    "count_triplets_with_sum_k",
    "a0139wordbreak",
    "scrabble_score",
    "reverse_integer",
    "prime_factors",
    "zebra_puzzle",
    "armstrong_numbers",
    "luhn_validator",
    "perfect_numbers",
    "calculate_area_of_polygon",
    "chaitanas_colossal_coaster",
    "a0162findpeakelement",
    "list_ops",
    "say",
    "markdown",
    "minimum_size_subarray_sum",
    "check_if_point_inside_polygon",
    "house",
    "forth",
]
base_cluster_processed_in_this_exec = []
llm_cluster_processed_in_this_exec = []

runned_llm = [
    "a0098validatebinarysearchtree",
    "variable_length_quantity",
    "lasagna",
    "crypto_square",
    "square_root",
    "freelancer_rates",
    "bob",
    "raindrops",
    "a0093restore_ip_addresses",
    "simple_cipher",
    "strain",
    "leap",
    "a0165compareversionnumbers",
    "bracket_push",
    "power",
    "diamond_printer",
    "rail_fence_cipher",
    "valid_anagram",
    "queen_attack",
    "flatten_array",
    "secrets",
    "state_of_tic_tac_toe",
    "meetup",
    "squeaky_clean",
    "a0211addandsearchworddatastructuredesign",
    "weather_forecast",
    "a0152maximumproductsubarray",
    "leap",
    "difference_of_squares",
    "raindrops",
    "bob",
    "octal",
    "find_peak_element",
    "binary_tree_right_side_view",
    "a0096uniquebinarysearchtrees",
    "protein_translator",
    "rotational_cipher",
    "a0216combination_sumiii",
    "luhn",
    "a0200numberofislands",
    "leap",
    "sort_rgb_array",
    "bowling",
    "find_missing_number_in_second_array",
    "gotta_snatch_em_all",
    "custom_set",
    "a0200numberofislands",
    "merge_sorted_array",
    "a0199binarytreerightsideview",
    "summary_ranges",
    "spiral_traversal",
    "candy",
    "need_for_speed",
    "hamming",
    "a0061rotatelist",
    "contains_duplicate",
    "encode_and_decode_strings",
    "longest_palindromic_substring",
    "accumulate",
    "rectangles",
    "two_bucket",
    "dn_dcharacter",
    "a0056mergeintervals",
    "container_with_most_water",
    "a0208implementtrieprefixtree",
    "a0146lrucache",
    "a0095uniquebinarysearchtreesii",
    "a0113pathsumii",
    "two_sum_ii_input_array_is_sorted",
    "lucky_numbers",
    "a0129sumroottoleafnumbers",
    "dnd_character",
    "card_tricks",
    "scramblies",
    "a0200numberofislands",
    "two_sum",
    "isogram",
    "a0094binarytreeinordertraversal",
    "find_el_smaller_left_bigger_right",
    "maximum_depth_of_binary_tree",
    "pangram",
    "nth_prime",
    "acronym",
    "majority_element",
    "a0200numberofislands",
    "salary_calculator",
    "atbash_cipher",
    "postfix_evaluate",
    "a0144binarytreepreordertraversal",
    "reverse_string",
    "ransom_note",
    "proverb",
    "log_levels",
    "run_length_encoding",
    "accumulate",
    "pangram_checker",
    "grade_school",
    "climbing_staircase",
    "a0133clonegraph",
    "book_store",
    "tree_building",
    "accumulate",
    "poker",
    "minimum_window_substring",
    "annalyns_infiltration",
    "collatz_conjecture",
    "eliuds_eggs",
    "pangram",
    "human_readable_numbers.test.js",
    "product_of_array_except_self",
    "pangram",
    "human_readable_numbers.test.js",
    "annalyns_infiltration",
    "collatz_conjecture",
    "eliuds_eggs",
    "connect",
    "tree_building",
    "poker",
    "minimum_window_substring",
    "pangram_checker",
    "grade_school",
    "a0133clonegraph",
    "book_store",
    "a0200numberofislands",
    "log_levels",
    "run_length_encoding",
    "pangram",
    "accumulate",
    "killer_sudoku_helper",
    "proverb",
    "a0144binarytreepreordertraversal",
    "reverse_string",
    "ransom_note",
    "salary_calculator",
    "a0073setmatrixzeros",
    "atbash_cipher",
    "a0200numberofislands",
    "maximum_depth_of_binary_tree",
    "pangram",
    "nth_prime",
    "two_sum",
    "isogram",
    "lucky_numbers",
    "grains",
    "a0129sumroottoleafnumbers",
    "dnd_character",
    "card_tricks",
    "a0208implementtrieprefixtree",
    "a0200numberofislands",
    "a0146lrucache",
    "a0095uniquebinarysearchtreesii",
    "two_sum_ii_input_array_is_sorted",
    "two_bucket",
    "rectangles",
    "dn_dcharacter",
    "container_with_most_water",
    "reverse_array",
    "beer_song",
    "a0061rotatelist",
    "contains_duplicate",
    "encode_and_decode_strings",
    "longest_palindromic_substring",
    "gross_store",
    "need_for_speed",
    "hamming",
    "a0151reversewordsinastring",
    "spiral_traversal",
    "candy",
    "bottle_song",
    "high_score_board",
    "a0199binarytreerightsideview",
    "custom_set",
    "sort_rgb_array",
    "bowling",
    "rotational_cipher",
    "luhn",
    "rational_numbers",
    "a0090subsetsii",
    "a0096uniquebinarysearchtrees",
    "protein_translator",
    "raindrops",
    "bob",
    "pascals_triangle",
    "octal",
    "binary_tree_right_side_view",
    "find_peak_element",
    "a0064minimumpathsum",
    "a0152maximumproductsubarray",
    "twofer",
    "leap",
    "accumulate",
    "meetup",
    "squeaky_clean",
    "a0211addandsearchworddatastructuredesign",
    "split_coins",
    "weather_forecast",
    "hashtag_generator",
    "flatten_array",
    "secrets",
    "leap",
    "rail_fence_cipher",
    "diamond_printer",
    "queen_attack",
    "valid_anagram",
    "a0131palindromepartitioning",
    "anagram",
    "strain",
    "leap",
    "a0165compareversionnumbers",
    "bracket_push",
    "power",
    "simple_linked_list",
    "freelancer_rates",
    "bob",
    "raindrops",
    "a0093restore_ip_addresses",
    "simple_cipher",
    "square_root",
    "a0200numberofislands",
    "variable_length_quantity",
    "lasagna",
    "all_your_base",
    "complex_numbers",
    "crypto_square",
    "need_for_speed",
    "hamming",
    "a0061rotatelist",
    "contains_duplicate",
    "encode_and_decode_strings",
    "longest_palindromic_substring",
    "rectangles",
    "two_bucket",
    "vehicle_purchase",
    "container_with_most_water",
    "dn_dcharacter",
    "word_count",
    "two_sum_ii_input_array_is_sorted",
    "a0095uniquebinarysearchtreesii",
    "a0208implementtrieprefixtree",
    "a0146lrucache",
    "dnd_character",
    "lucky_numbers",
    "a0129sumroottoleafnumbers",
    "card_tricks",
    "a0200numberofislands",
    "two_sum",
    "isogram",
    "nth_prime",
    "pangram",
    "maximum_depth_of_binary_tree",
    "accumulate",
    "a0200numberofislands",
    "salary_calculator",
    "atbash_cipher",
    "a0144binarytreepreordertraversal",
    "ransom_note",
    "accumulate",
    "reverse_string",
    "proverb",
    "elons_toys",
    "run_length_encoding",
    "log_levels",
    "count_ip_addresses",
    "accumulate",
    "pangram_checker",
    "grade_school",
    "book_store",
    "a0200numberofislands",
    "a0133clonegraph",
    "poker",
    "tree_building",
    "two_fer",
    "minimum_window_substring",
    "tournament",
    "eliuds_eggs",
    "annalyns_infiltration",
    "collatz_conjecture",
    "scale_generator",
    "human_readable_numbers.test.js",
    "pangram",
    "variable_length_quantity",
    "lasagna",
    "crypto_square",
    "a0109convertsortedlisttobinarysearchtree",
    "square_root",
    "a0063uniquepathsii",
    "bob",
    "freelancer_rates",
    "a0093restore_ip_addresses",
    "simple_cipher",
    "raindrops",
    "strain",
    "leap",
    "power",
    "a0165compareversionnumbers",
    "bracket_push",
    "gigasecond",
    "valid_anagram",
    "queen_attack",
    "diamond_printer",
    "rail_fence_cipher",
    "flatten_array",
    "secrets",
    "evaluate_reverse_polish_notation",
    "odd_sum",
    "a0211addandsearchworddatastructuredesign",
    "squeaky_clean",
    "weather_forecast",
    "meetup",
    "a0152maximumproductsubarray",
    "a0086partitionlist",
    "leap",
    "raindrops",
    "octal",
    "find_peak_element",
    "binary_tree_right_side_view",
    "bob",
    "accumulate",
    "a0096uniquebinarysearchtrees",
    "protein_translator",
    "bank_account_action_invalid_exception",
    "rna_transcription",
    "luhn",
    "set_matrix_zeroes",
    "rotational_cipher",
    "a0200numberofislands",
    "bowling",
    "sort_rgb_array",
    "custom_set",
    "nth_fibonacci_number",
    "raindrops",
    "a0199binarytreerightsideview",
    "bob",
    "clock",
    "spiral_traversal",
    "candy",
    "a0200numberofislands",
    "spiral_traversal",
    "candy",
    "a0143reorderlist",
    "a0199binarytreerightsideview",
    "custom_set",
    "bowling",
    "sort_rgb_array",
    "luhn",
    "rotational_cipher",
    "kth_smallest",
    "dominoes",
    "longest_repeating_character_replacement",
    "a0096uniquebinarysearchtrees",
    "count_triplets_with_sum_k",
    "protein_translator",
    "raindrops",
    "a0139wordbreak",
    "octal",
    "binary_tree_right_side_view",
    "find_peak_element",
    "bob",
    "a0152maximumproductsubarray",
    "leap",
    "scrabble_score",
    "a0211addandsearchworddatastructuredesign",
    "squeaky_clean",
    "weather_forecast",
    "reverse_integer",
    "meetup",
    "bob",
    "flatten_array",
    "secrets",
    "raindrops",
    "queen_attack",
    "valid_anagram",
    "rail_fence_cipher",
    "diamond_printer",
    "prime_factors",
    "strain",
    "leap",
    "power",
    "a0165compareversionnumbers",
    "bracket_push",
    "bob",
    "freelancer_rates",
    "a0093restore_ip_addresses",
    "simple_cipher",
    "raindrops",
    "square_root",
    "zebra_puzzle",
    "variable_length_quantity",
    "lasagna",
    "crypto_square",
    "armstrong_numbers",
    "luhn_validator",
    "human_readable_numbers.test.js",
    "perfect_numbers",
    "pangram",
    "eliuds_eggs",
    "annalyns_infiltration",
    "collatz_conjecture",
    "poker",
    "tree_building",
    "minimum_window_substring",
    "calculate_area_of_polygon",
    "chaitanas_colossal_coaster",
    "pangram_checker",
    "grade_school",
    "a0162findpeakelement",
    "list_ops",
    "book_store",
    "a0200numberofislands",
    "a0200numberofislands",
    "a0133clonegraph",
    "run_length_encoding",
    "log_levels",
    "say",
    "accumulate",
    "proverb",
    "markdown",
    "a0200numberofislands",
    "a0144binarytreepreordertraversal",
    "ransom_note",
    "accumulate",
    "reverse_string",
    "salary_calculator",
    "atbash_cipher",
    "minimum_size_subarray_sum",
    "nth_prime",
    "check_if_point_inside_polygon",
    "pangram",
    "maximum_depth_of_binary_tree",
    "two_sum",
    "isogram",
    "a0200numberofislands",
    "dnd_character",
    "lucky_numbers",
    "a0129sumroottoleafnumbers",
    "card_tricks",
    "house",
    "two_sum_ii_input_array_is_sorted",
    "a0095uniquebinarysearchtreesii",
    "a0208implementtrieprefixtree",
    "a0146lrucache",
    "forth",
    "two_bucket",
    "rectangles",
    "container_with_most_water",
    "dn_dcharacter",
    "accumulate",
    "a0061rotatelist",
    "contains_duplicate",
    "encode_and_decode_strings",
    "longest_palindromic_substring",
    "need_for_speed",
    "hamming",
    "pangram",
    "perfect_numbers",
    "human_readable_numbers.test.js",
    "luhn_validator",
    "scale_generator",
    "product_of_array_except_self",
    "connect",
    "tournament",
    "calculate_area_of_polygon",
    "tree_building",
    "two_fer",
    "poker",
    "a0133clonegraph",
    "climbing_staircase",
    "a0162findpeakelement",
    "list_ops",
    "chaitanas_colossal_coaster",
    "say",
    "log_levels",
    "count_ip_addresses",
    "pangram",
    "a0200numberofislands",
    "elons_toys",
    "markdown",
    "killer_sudoku_helper",
    "proverb",
    "a0200numberofislands",
    "accumulate",
    "a0073setmatrixzeros",
    "postfix_evaluate",
    "majority_element",
    "salary_calculator",
    "minimum_size_subarray_sum",
    "a0200numberofislands",
    "acronym",
    "check_if_point_inside_polygon",
    "pangram",
    "a0094binarytreeinordertraversal",
    "find_el_smaller_left_bigger_right",
    "isogram",
    "house",
    "scramblies",
    "grains",
    "dnd_character",
    "a0146lrucache",
    "a0113pathsumii",
    "word_count",
    "reverse_array",
    "forth",
    "rectangles",
    "vehicle_purchase",
    "container_with_most_water",
    "a0056mergeintervals",
    "a0200numberofislands",
    "encode_and_decode_strings",
    "bob",
    "longest_palindromic_substring",
    "gross_store",
    "a0061rotatelist",
    "beer_song",
    "contains_duplicate",
    "pangram",
    "a0151reversewordsinastring",
    "need_for_speed",
    "spiral_traversal",
    "clock",
    "summary_ranges",
    "candy",
    "bob",
    "a0200numberofislands",
    "high_score_board",
    "a0143reorderlist",
    "bottle_song",
    "raindrops",
    "merge_sorted_array",
    "nth_fibonacci_number",
    "a0200numberofislands",
    "bowling",
    "find_missing_number_in_second_array",
    "gotta_snatch_em_all",
    "leap",
    "rational_numbers",
    "a0090subsetsii",
    "dominoes",
    "kth_smallest",
    "set_matrix_zeroes",
    "luhn",
    "a0216combination_sumiii",
    "bank_account_action_invalid_exception",
    "rna_transcription",
    "longest_repeating_character_replacement",
    "count_triplets_with_sum_k",
    "pascals_triangle",
    "binary_tree_right_side_view",
    "difference_of_squares",
    "a0139wordbreak",
    "leap",
    "twofer",
    "a0086partitionlist",
    "a0064minimumpathsum",
    "reverse_integer",
    "split_coins",
    "scrabble_score",
    "odd_sum",
    "bob",
    "evaluate_reverse_polish_notation",
    "state_of_tic_tac_toe",
    "hashtag_generator",
    "secrets",
    "leap",
    "queen_attack",
    "a0131palindromepartitioning",
    "raindrops",
    "gigasecond",
    "accumulate",
    "simple_linked_list",
    "prime_factors",
    "anagram",
    "raindrops",
    "freelancer_rates",
    "zebra_puzzle",
    "a0063uniquepathsii",
    "a0109convertsortedlisttobinarysearchtree",
    "complex_numbers",
    "all_your_base",
    "armstrong_numbers",
    "a0098validatebinarysearchtree",
    "complex_numbers",
    "all_your_base",
    "crypto_square",
    "armstrong_numbers",
    "a0098validatebinarysearchtree",
    "zebra_puzzle",
    "a0063uniquepathsii",
    "a0109convertsortedlisttobinarysearchtree",
    "a0165compareversionnumbers",
    "simple_linked_list",
    "anagram",
    "prime_factors",
    "a0131palindromepartitioning",
    "gigasecond",
    "raindrops",
    "leap",
    "bob",
    "evaluate_reverse_polish_notation",
    "state_of_tic_tac_toe",
    "hashtag_generator",
    "a0211addandsearchworddatastructuredesign",
    "reverse_integer",
    "weather_forecast",
    "split_coins",
    "scrabble_score",
    "odd_sum",
    "twofer",
    "a0086partitionlist",
    "a0064minimumpathsum",
    "bob",
    "pascals_triangle",
    "difference_of_squares",
    "a0139wordbreak",
    "bank_account_action_invalid_exception",
    "rna_transcription",
    "longest_repeating_character_replacement",
    "count_triplets_with_sum_k",
    "a0090subsetsii",
    "rational_numbers",
    "dominoes",
    "kth_smallest",
    "set_matrix_zeroes",
    "rotational_cipher",
    "a0216combination_sumiii",
    "accumulate",
    "find_missing_number_in_second_array",
    "gotta_snatch_em_all",
    "leap",
    "raindrops",
    "merge_sorted_array",
    "nth_fibonacci_number",
    "high_score_board",
    "a0143reorderlist",
    "bottle_song",
    "clock",
    "summary_ranges",
    "bob",
    "pangram",
    "a0151reversewordsinastring",
    "gross_store",
    "beer_song",
    "reverse_array",
    "forth",
    "vehicle_purchase",
    "a0056mergeintervals",
    "two_sum_ii_input_array_is_sorted",
    "a0113pathsumii",
    "word_count",
    "house",
    "scramblies",
    "card_tricks",
    "grains",
    "a0094binarytreeinordertraversal",
    "find_el_smaller_left_bigger_right",
    "acronym",
    "check_if_point_inside_polygon",
    "minimum_size_subarray_sum",
    "a0073setmatrixzeros",
    "postfix_evaluate",
    "majority_element",
    "ransom_note",
    "a0144binarytreepreordertraversal",
    "a0200numberofislands",
    "elons_toys",
    "markdown",
    "killer_sudoku_helper",
    "say",
    "run_length_encoding",
    "count_ip_addresses",
    "pangram",
    "a0200numberofislands",
    "climbing_staircase",
    "a0162findpeakelement",
    "list_ops",
    "chaitanas_colossal_coaster",
    "grade_school",
    "calculate_area_of_polygon",
    "two_fer",
    "annalyns_infiltration",
    "connect",
    "tournament",
    "perfect_numbers",
    "pangram",
    "luhn_validator",
    "scale_generator",
    "product_of_array_except_self",
    "summary_ranges",
    "clock",
    "bob",
    "a0143reorderlist",
    "high_score_board",
    "bottle_song",
    "merge_sorted_array",
    "nth_fibonacci_number",
    "raindrops",
    "custom_set",
    "gotta_snatch_em_all",
    "sort_rgb_array",
    "find_missing_number_in_second_array",
    "leap",
    "kth_smallest",
    "rational_numbers",
    "a0090subsetsii",
    "dominoes",
    "a0216combination_sumiii",
    "set_matrix_zeroes",
    "rna_transcription",
    "bank_account_action_invalid_exception",
    "count_triplets_with_sum_k",
    "a0096uniquebinarysearchtrees",
    "longest_repeating_character_replacement",
    "octal",
    "find_peak_element",
    "pascals_triangle",
    "raindrops",
    "a0139wordbreak",
    "difference_of_squares",
    "a0086partitionlist",
    "twofer",
    "a0064minimumpathsum",
    "squeaky_clean",
    "split_coins",
    "reverse_integer",
    "odd_sum",
    "scrabble_score",
    "evaluate_reverse_polish_notation",
    "bob",
    "state_of_tic_tac_toe",
    "hashtag_generator",
    "leap",
    "a0131palindromepartitioning",
    "raindrops",
    "gigasecond",
    "simple_linked_list",
    "prime_factors",
    "anagram",
    "leap",
    "strain",
    "simple_cipher",
    "a0063uniquepathsii",
    "zebra_puzzle",
    "a0109convertsortedlisttobinarysearchtree",
    "complex_numbers",
    "all_your_base",
    "armstrong_numbers",
    "a0098validatebinarysearchtree",
    "perfect_numbers",
    "product_of_array_except_self",
    "scale_generator",
    "luhn_validator",
    "connect",
    "a0200numberofislands",
    "eliuds_eggs",
    "tournament",
    "calculate_area_of_polygon",
    "accumulate",
    "two_fer",
    "book_store",
    "climbing_staircase",
    "chaitanas_colossal_coaster",
    "list_ops",
    "a0162findpeakelement",
    "say",
    "pangram",
    "count_ip_addresses",
    "markdown",
    "elons_toys",
    "a0200numberofislands",
    "killer_sudoku_helper",
    "postfix_evaluate",
    "a0073setmatrixzeros",
    "atbash_cipher",
    "majority_element",
    "a0200numberofislands",
    "minimum_size_subarray_sum",
    "acronym",
    "accumulate",
    "nth_prime",
    "check_if_point_inside_polygon",
    "maximum_depth_of_binary_tree",
    "find_el_smaller_left_bigger_right",
    "a0094binarytreeinordertraversal",
    "two_sum",
    "scramblies",
    "house",
    "lucky_numbers",
    "grains",
    "a0113pathsumii",
    "a0095uniquebinarysearchtreesii",
    "word_count",
    "reverse_array",
    "vehicle_purchase",
    "two_bucket",
    "forth",
    "a0056mergeintervals",
    "accumulate",
    "gross_store",
    "a0200numberofislands",
    "beer_song",
    "a0151reversewordsinastring",
    "hamming",
    "pangram",
    "a0151reversewordsinastring",
    "pangram",
    "gross_store",
    "beer_song",
    "reverse_array",
    "vehicle_purchase",
    "forth",
    "dn_dcharacter",
    "a0056mergeintervals",
    "a0113pathsumii",
    "a0208implementtrieprefixtree",
    "word_count",
    "scramblies",
    "house",
    "a0129sumroottoleafnumbers",
    "grains",
    "find_el_smaller_left_bigger_right",
    "a0094binarytreeinordertraversal",
    "acronym",
    "accumulate",
    "check_if_point_inside_polygon",
    "a0200numberofislands",
    "minimum_size_subarray_sum",
    "postfix_evaluate",
    "a0073setmatrixzeros",
    "majority_element",
    "reverse_string",
    "markdown",
    "elons_toys",
    "a0200numberofislands",
    "killer_sudoku_helper",
    "say",
    "accumulate",
    "pangram",
    "count_ip_addresses",
    "a0200numberofislands",
    "climbing_staircase",
    "pangram_checker",
    "chaitanas_colossal_coaster",
    "list_ops",
    "a0162findpeakelement",
    "minimum_window_substring",
    "calculate_area_of_polygon",
    "two_fer",
    "accumulate",
    "connect",
    "collatz_conjecture",
    "tournament",
    "perfect_numbers",
    "product_of_array_except_self",
    "scale_generator",
    "luhn_validator",
    "complex_numbers",
    "all_your_base",
    "armstrong_numbers",
    "variable_length_quantity",
    "lasagna",
    "a0098validatebinarysearchtree",
    "a0063uniquepathsii",
    "zebra_puzzle",
    "a0109convertsortedlisttobinarysearchtree",
    "square_root",
    "a0093restore_ip_addresses",
    "bob",
    "simple_linked_list",
    "bracket_push",
    "power",
    "anagram",
    "prime_factors",
    "a0131palindromepartitioning",
    "diamond_printer",
    "rail_fence_cipher",
    "valid_anagram",
    "gigasecond",
    "raindrops",
    "leap",
    "flatten_array",
    "evaluate_reverse_polish_notation",
    "bob",
    "state_of_tic_tac_toe",
    "hashtag_generator",
    "split_coins",
    "reverse_integer",
    "meetup",
    "accumulate",
    "odd_sum",
    "scrabble_score",
    "a0086partitionlist",
    "twofer",
    "a0064minimumpathsum",
    "a0152maximumproductsubarray",
    "pascals_triangle",
    "a0139wordbreak",
    "difference_of_squares",
    "protein_translator",
    "rna_transcription",
    "bank_account_action_invalid_exception",
    "count_triplets_with_sum_k",
    "longest_repeating_character_replacement",
    "kth_smallest",
    "a0090subsetsii",
    "rational_numbers",
    "dominoes",
    "a0216combination_sumiii",
    "set_matrix_zeroes",
    "gotta_snatch_em_all",
    "find_missing_number_in_second_array",
    "leap",
    "merge_sorted_array",
    "nth_fibonacci_number",
    "raindrops",
    "a0199binarytreerightsideview",
    "a0143reorderlist",
    "high_score_board",
    "bottle_song",
    "summary_ranges",
    "clock",
    "bob",
]

runned_base = [
    "reverse_all_lists",
    "elons_toy_car",
    "pig_latin_translator",
    "find_el_smaller_left_bigger_right",
    "resistor_color",
    "all_your_base",
    "queens_problem",
    "three_sum",
    "check_if_point_inside_polygon",
    "find_two_missing_numbers",
    "a0059spiralmatrixii",
    "largest_series_product",
    "a0094binarytreeinordertraversal",
    "robot_simulator",
    "the_farm",
    "sorting_room",
    "a0138copylistwithrandompointer",
    "election_day",
    "a0152maximumproductsubarray",
    "min_cost_coloring",
    "a0116populatingnextrightpointersineachnode",
    "unique_paths",
    "bottle_song",
    "container_with_most_water",
    "linked_list_cycle",
    "valid_parentheses",
    "random_sample",
    "check_if_two_rectangles_overlap",
    "a0201bitwiseandofnumbersrange",
    "chaitanas_colossal_coaster",
    "a0144binarytreepreordertraversal",
    "longest_common_prefix",
    "atbash_cipher",
    "count_divisibles_in_range",
    "queen",
    "coordinate_transformation",
    "nth_fibonacci_number",
    "calculate_area_of_polygon",
    "grade_school",
    "log_levels_alt",
    "party_robot",
    "robot_name",
    "vehicle_purchase",
    "meetup_schedule",
    "sum_non_adjecent",
    "binary_search",
    "card_games",
    "zebra_puzzle",
    "dn_dcharacter",
    "etl",
    "complex_numbers",
    "count_positives",
    "a0215kthlargestelementinanarray",
    "scrabble_score",
    "power_set",
    "accumulate",
    "squeaky_clean",
    "eliuds_eggs",
    "need_for_speed",
    "rail_fence_cipher",
    "a0120triangle",
    "accumulate",
    "census",
    "reverse_vowels",
    "darts",
    "basic_calculator",
    "prime_calculator",
    "acronym",
    "smallest_multiple",
    "simple_cipher",
    "a0074search2dmatrix",
    "a0055jumpgame",
    "say",
    "blackjack",
    "ocr_numbers",
    "best_time_to_buy_and_sell_stock",
    "bank_account",
    "rectangles",
    "cars_assemble",
    "welcome_to_tech_palace",
    "summary_ranges",
    "phone_number",
    "lasagna",
    "accumulate",
    "a0064minimumpathsum",
    "min_swaps",
    "a0153findminimuminrotatedsortedarray",
    "binary",
    "majority_element",
    "word_count",
    "a0114flattenbinarytreetolinkedlist",
    "killer_sudoku_helper",
    "gigasecond",
    "a0147insertionsortlist",
    "meteorology",
    "find_first_missing_positive",
    "hamming",
    "a0127wordladder",
    "ledger",
    "a0207courseschedule",
    "forth",
    "palindrome_integer",
    "tournament",
    "a0092reverselinkedlistii",
    "valid_anagram",
    "ozans_playlist",
    "longest_common_subsequence",
    "mixed_juices",
    "a0056mergeintervals",
    "card_tricks",
    "book_store",
    "matching_brackets",
    "a0109convertsortedlisttobinarysearchtree",
    "rna_transcription",
    "resistor_color_enum",
    "snakes_and_ladders",
    "freelancer_rates",
    "making_the_grade",
    "bowling",
    "a0075sortcolors",
    "log_levels",
    "linked_list",
    "number_of_islands",
    "merge_intervals",
    "lasagna_master",
    "debug_cpp_entries_1",
    "largest_series_product_calculator",
    "valid_sudoku",
    "longest_palindromic_substring",
    "custom_set",
    "perfect_numbers",
    "river_sizes",
    "wordy",
    "a0131palindromepartitioning",
    "grains",
    "minimum_window_substring",
    "reverse_integer",
    "savings_account",
    "little_sisters_vocab",
    "bank_account_action_invalid_exception",
    "diamond",
    "run_length_encoding",
    "matrix",
    "sublist",
    "high_scores",
    "error_handling",
    "find_peak_element",
    "luhn",
    "a0001twosum",
    "a0162findpeakelement",
    "diamond_printer",
    "isbn_verifier",
    "interest_is_interesting",
    "swap_first_and_last_word",
    "little_sisters_essay",
    "two_sum",
    "a0151reversewordsinastring",
    "a0000blank",
    "list_ops",
    "resistor_color_duo",
    "product_of_array_except_self",
    "a0213houserobberii",
    "space_age",
    "flatten_deep_list",
    "lucky_numbers",
    "two_fer",
    "weather_forecast",
    "grep",
    "house",
    "isogram",
    "secret_handshake",
    "merge_sorted_array",
    "reverse_string",
    "find_one_missing_number",
    "evaluate_reverse_polish_notation",
    "trinary",
    "rotate_array",
    "two_bucket",
    "a0089graycode",
    "a0133clonegraph",
    "postfix_evaluate",
    "parsing_log_files",
    "meetup",
    "rational_numbers",
    "change",
    "a0143reorderlist",
    "a0093restore_ip_addresses",
    "clock",
    "bob",
    "candy",
    "a0062uniquepaths",
    "pascals_triangle",
    "strain",
    "permutation_in_string",
    "airport_robot",
    "a0199binarytreerightsideview",
    "transpose",
    "odd_sum",
    "collatz_conjecture",
    "bowling_game_log",
    "connect",
    "tree_building",
    "bracket_push",
    "a0102binarytreelevelordertraversal",
    "simple_linked_list",
    "ransom_note",
    "annalyns_infiltration",
    "palindrome_products",
    "letter_combinations",
    "a0073setmatrixzeros",
    "react",
    "a0098validatebinarysearchtree",
    "yacht",
    "minimum_absolute_difference_in_bst",
    "animal_magic",
    "poker",
    "climbing_staircase",
    "anagram",
    "find_busiest_interval",
    "a0079wordsearch",
    "a0096uniquebinarysearchtrees",
    "secrets",
    "find_el_where_k_greater_or_equal",
    "protein_translation",
    "allergies",
    "pangram",
    "word_break",
    "square_root",
    "a0148sortlist",
    "protein_translation",
    "allergies",
    "pangram",
    "word_break",
    "encode_and_decode_strings",
    "a0148sortlist",
    "hexadecimal",
    "climbing_staircase",
    "find_busiest_interval",
    "a0079wordsearch",
    "a0096uniquebinarysearchtrees",
    "secrets",
    "find_el_where_k_greater_or_equal",
    "gotta_snatch_em_all",
    "a0130surroundedregions",
    "yacht",
    "minimum_absolute_difference_in_bst",
    "animal_magic",
    "paasio",
    "find_missing_number_in_second_array",
    "poker",
    "letter_combinations",
    "queen_attack",
    "a0073setmatrixzeros",
    "react",
    "food_chain",
    "simple_linked_list",
    "a0102binarytreelevelordertraversal",
    "ransom_note",
    "permutation_in_string",
    "airport_robot",
    "a0199binarytreerightsideview",
    "transpose",
    "odd_sum",
    "octal",
    "tree_building",
    "bowling_game_log",
    "bracket_push",
    "a0062uniquepaths",
    "ghost_gobble_arcade_game",
    "pascals_triangle",
    "a0071simplitypath",
    "strain",
    "a0146lrucache",
    "a0093restore_ip_addresses",
    "spiral_matrix",
    "clock",
    "candy",
    "rotate_array",
    "two_bucket",
    "a0089graycode",
    "a0133clonegraph",
    "postfix_evaluate",
    "parsing_log_files",
    "meetup",
    "rational_numbers",
    "a0086partitionlist",
    "find_one_missing_number",
    "evaluate_reverse_polish_notation",
    "pythagorean_triplet",
    "sort_rgb_array",
    "count_consecutive_sums",
    "trinary",
    "a0082removeduplicatesfromsortedlistii",
    "flatten_deep_list",
    "lucky_numbers",
    "weather_forecast",
    "grep",
    "two_fer",
    "count_triplets_with_sum_k",
    "isogram",
    "secret_handshake",
    "merge_sorted_array",
    "a0103binarytreezigzaglevelordertraversal",
    "two_sum",
    "a0000blank",
    "resistor_color_duo",
    "product_of_array_except_self",
    "a0213houserobberii",
    "a0162findpeakelement",
    "diamond_printer",
    "interest_is_interesting",
    "swap_first_and_last_word",
    "little_sisters_essay",
    "savings_account",
    "reverse_integer",
    "little_sisters_vocab",
    "a0134gasstation",
    "bank_account_action_invalid_exception",
    "sublist",
    "error_handling",
    "high_scores",
    "valid_palindrome",
    "find_peak_element",
    "luhn",
    "custom_set",
    "river_sizes",
    "wordy",
    "a0131palindromepartitioning",
    "linked_list",
    "beer_song",
    "merge_intervals",
    "lasagna_master",
    "largest_series_product_calculator",
    "mixed_juices",
    "longest_common_subsequence",
    "book_store",
    "a0056mergeintervals",
    "card_tricks",
    "a0109convertsortedlisttobinarysearchtree",
    "matching_brackets",
    "rna_transcription",
    "freelancer_rates",
    "making_the_grade",
    "bowling",
    "log_levels",
    "ledger",
    "forth",
    "palindrome_integer",
    "a0207courseschedule",
    "tournament",
    "a0092reverselinkedlistii",
    "valid_anagram",
    "ozans_playlist",
    "word_count",
    "a0165compareversionnumbers",
    "a0114flattenbinarytreetolinkedlist",
    "prime_factors",
    "killer_sudoku_helper",
    "gigasecond",
    "a0147insertionsortlist",
    "meteorology",
    "find_first_missing_positive",
    "hamming",
    "a0127wordladder",
    "lasagna",
    "accumulate",
    "rotational_cipher",
    "a0064minimumpathsum",
    "min_swaps",
    "a0153findminimuminrotatedsortedarray",
    "binary",
    "majority_element",
    "bank_account",
    "best_time_to_buy_and_sell_stock",
    "guidos_gorgeous_lasagna",
    "a0095uniquebinarysearchtreesii",
    "nth_prime",
    "chessboard",
    "cars_assemble",
    "summary_ranges",
    "a0074search2dmatrix",
    "high_score_board",
    "a0055jumpgame",
    "say",
    "blackjack",
    "basic_calculator",
    "prime_calculator",
    "dnd_character",
    "smallest_multiple",
    "simple_cipher",
    "a0200numberofislands",
    "need_for_speed",
    "logs_logs_logs",
    "rail_fence_cipher",
    "two_sum_ii_input_array_is_sorted",
    "a0120triangle",
    "a0105constructbinarytreefrompreorderandinordertraversal",
    "census",
    "a0215kthlargestelementinanarray",
    "scrabble_score",
    "state_of_tic_tac_toe",
    "accumulate",
    "squeaky_clean",
    "a0210coursescheduleii",
    "complex_numbers",
    "etl",
    "grade_school",
    "party_robot",
    "robot_name",
    "vehicle_purchase",
    "sum_non_adjecent",
    "pig_latin",
    "sliding_window_maximum",
    "binary_search",
    "zebra_puzzle",
    "dn_dcharacter",
    "chaitanas_colossal_coaster",
    "a0144binarytreepreordertraversal",
    "count_divisibles_in_range",
    "queen",
    "a0061rotatelist",
    "word_search",
    "nth_fibonacci_number",
    "calculate_area_of_polygon",
    "coordinate_transformation",
    "a0080removeduplicatesfromsortedarrayii",
    "bottle_song",
    "container_with_most_water",
    "linked_list_cycle",
    "valid_parentheses",
    "longest_increasing_subarray",
    "random_sample",
    "a0201bitwiseandofnumbersrange",
    "sorting_room",
    "election_day",
    "a0152maximumproductsubarray",
    "a0116populatingnextrightpointersineachnode",
    "unique_paths",
    "check_if_point_inside_polygon",
    "three_sum",
    "find_two_missing_numbers",
    "largest_series_product",
    "a0094binarytreeinordertraversal",
    "the_farm",
    "robot_simulator",
    "reverse_all_lists",
    "elons_toy_car",
    "difference_of_squares_calculator",
    "find_el_smaller_left_bigger_right",
    "pig_latin_translator",
    "resistor_color",
    "all_your_base",
    "queens_problem",
    "power",
    "linked_list",
    "fancy_sequence",
    "largest_series_product_calculator",
    "merge_intervals",
    "lasagna_master",
    "river_sizes",
    "custom_set",
    "wordy",
    "a0131palindromepartitioning",
    "scale_generator",
    "sieve",
    "bank_account_action_invalid_exception",
    "reverse_integer",
    "savings_account",
    "little_sisters_vocab",
    "luhn",
    "find_peak_element",
    "high_scores",
    "error_handling",
    "sublist",
    "interest_is_interesting",
    "kindergarten_garden",
    "diamond_printer",
    "a0162findpeakelement",
    "little_sisters_essay",
    "swap_first_and_last_word",
    "a0000blank",
    "two_sum",
    "product_of_array_except_self",
    "resistor_color_duo",
    "a0179largestnumber",
    "a0213houserobberii",
    "lucky_numbers",
    "flatten_deep_list",
    "two_fer",
    "weather_forecast",
    "grep",
    "isogram",
    "merge_sorted_array",
    "secret_handshake",
    "a0090subsetsii",
    "amusement_park",
    "find_one_missing_number",
    "evaluate_reverse_polish_notation",
    "trinary",
    "anagram_indices",
    "jedliks_toy_car",
    "two_bucket",
    "a0089graycode",
    "rotate_array",
    "meetup",
    "rational_numbers",
    "parallel_letter_frequency",
    "postfix_evaluate",
    "parsing_log_files",
    "a0133clonegraph",
    "a0093restore_ip_addresses",
    "clock",
    "candy",
    "binary_search_tree",
    "armstrong_numbers",
    "a0062uniquepaths",
    "pascals_triangle",
    "reverse_ascending_sublists",
    "strain",
    "a0199binarytreerightsideview",
    "airport_robot",
    "permutation_in_string",
    "pov",
    "bowling_game_log",
    "tree_building",
    "bracket_push",
    "odd_sum",
    "transpose",
    "a0102binarytreelevelordertraversal",
    "simple_linked_list",
    "ransom_note",
    "a0054spiralmatrix",
    "a0142linkedlistcycleii",
    "sum_of_multiples",
    "pangram_checker",
    "luhn_validator",
    "letter_combinations",
    "ordered_digits",
    "react",
    "a0073setmatrixzeros",
    "yacht",
    "poker",
    "animal_magic",
    "minimum_absolute_difference_in_bst",
    "find_busiest_interval",
    "find_min_path",
    "climbing_staircase",
    "secrets",
    "set_matrix_zeroes",
    "find_el_where_k_greater_or_equal",
    "a0079wordsearch",
    "a0096uniquebinarysearchtrees",
    "raindrops",
    "allergies",
    "protein_translation",
    "a0148sortlist",
    "pangram",
    "word_break",
    "split_coins",
    "elons_toy_car",
    "reverse_all_lists",
    "all_your_base",
    "queens_problem",
    "pig_latin_translator",
    "find_el_smaller_left_bigger_right",
    "resistor_color",
    "find_two_missing_numbers",
    "three_sum",
    "check_if_point_inside_polygon",
    "a0094binarytreeinordertraversal",
    "robot_simulator",
    "the_farm",
    "largest_series_product",
    "election_day",
    "a0152maximumproductsubarray",
    "triangle",
    "sorting_room",
    "unique_paths",
    "a0116populatingnextrightpointersineachnode",
    "crypto_square",
    "accumulate",
    "valid_parentheses",
    "bottle_song",
    "container_with_most_water",
    "linked_list_cycle",
    "bird_watcher",
    "a0201bitwiseandofnumbersrange",
    "random_sample",
    "queen",
    "count_divisibles_in_range",
    "a0144binarytreepreordertraversal",
    "chaitanas_colossal_coaster",
    "saddle_points",
    "coordinate_transformation",
    "nth_fibonacci_number",
    "calculate_area_of_polygon",
    "robot_name",
    "party_robot",
    "grade_school",
    "binary_search",
    "zebra_puzzle",
    "dn_dcharacter",
    "vehicle_purchase",
    "sum_non_adjecent",
    "a0150evaluatereversepolishnotation",
    "etl",
    "complex_numbers",
    "a0215kthlargestelementinanarray",
    "scrabble_score",
    "a0209minimumsizesubarraysum",
    "squeaky_clean",
    "accumulate",
    "need_for_speed",
    "a0120triangle",
    "a0208implementtrieprefixtree",
    "rail_fence_cipher",
    "census",
    "prime_calculator",
    "basic_calculator",
    "smallest_multiple",
    "simple_cipher",
    "a0055jumpgame",
    "a0091decodeways",
    "a0077combinations",
    "captains_log",
    "a0074search2dmatrix",
    "blackjack",
    "say",
    "a0129sumroottoleafnumbers",
    "best_time_to_buy_and_sell_stock",
    "bank_account",
    "a0187repeateddnasequences",
    "summary_ranges",
    "cars_assemble",
    "accumulate",
    "lasagna",
    "majority_element",
    "min_swaps",
    "a0064minimumpathsum",
    "a0153findminimuminrotatedsortedarray",
    "binary",
    "killer_sudoku_helper",
    "gigasecond",
    "minesweeper",
    "word_count",
    "twelve_days",
    "a0114flattenbinarytreetolinkedlist",
    "hamming",
    "find_first_missing_positive",
    "a0127wordladder",
    "contains_duplicate",
    "meteorology",
    "a0147insertionsortlist",
    "protein_translator",
    "booking_up_for_beauty",
    "tournament",
    "a0207courseschedule",
    "forth",
    "palindrome_integer",
    "ledger",
    "ozans_playlist",
    "find_element_range_sorted_array",
    "elons_toys",
    "find_unpaired",
    "a0092reverselinkedlistii",
    "valid_anagram",
    "matching_brackets",
    "a0109convertsortedlisttobinarysearchtree",
    "rna_transcription",
    "longest_common_subsequence",
    "mixed_juices",
    "a0056mergeintervals",
    "card_tricks",
    "book_store",
    "freelancer_rates",
    "making_the_grade",
    "log_levels",
    "bowling",
    "a0109convertsortedlisttobinarysearchtree",
    "matching_brackets",
    "rna_transcription",
    "mixed_juices",
    "longest_common_subsequence",
    "book_store",
    "a0056mergeintervals",
    "card_tricks",
    "freelancer_rates",
    "making_the_grade",
    "log_levels",
    "bowling",
    "a0216combination_sumiii",
    "tournament",
    "forth",
    "palindrome_integer",
    "a0207courseschedule",
    "ledger",
    "ozans_playlist",
    "a0092reverselinkedlistii",
    "valid_anagram",
    "killer_sudoku_helper",
    "gigasecond",
    "football_match_reports",
    "word_count",
    "a0114flattenbinarytreetolinkedlist",
    "hamming",
    "find_first_missing_positive",
    "a0127wordladder",
    "meteorology",
    "a0147insertionsortlist",
    "accumulate",
    "lasagna",
    "shuffle_array",
    "majority_element",
    "min_swaps",
    "a0064minimumpathsum",
    "minimum_size_subarray_sum",
    "a0153findminimuminrotatedsortedarray",
    "binary",
    "bank_account",
    "best_time_to_buy_and_sell_stock",
    "summary_ranges",
    "cars_assemble",
    "a0055jumpgame",
    "count_ip_addresses",
    "a0074search2dmatrix",
    "kth_smallest",
    "blackjack",
    "accumulate",
    "say",
    "prime_calculator",
    "basic_calculator",
    "smallest_multiple",
    "simple_cipher",
    "need_for_speed",
    "proverb",
    "a0120triangle",
    "rail_fence_cipher",
    "census",
    "a0211addandsearchworddatastructuredesign",
    "a0215kthlargestelementinanarray",
    "scrabble_score",
    "a0063uniquepathsii",
    "squeaky_clean",
    "accumulate",
    "flatten_array",
    "min_stack",
    "longest_substring_without_repeating_characters",
    "currency_exchange",
    "complex_numbers",
    "etl",
    "robot_name",
    "party_robot",
    "grade_school",
    "binary_search",
    "zebra_puzzle",
    "dn_dcharacter",
    "optical_character_reader",
    "vehicle_purchase",
    "sum_non_adjecent",
    "queen",
    "count_divisibles_in_range",
    "reverse_array",
    "accumulate",
    "a0144binarytreepreordertraversal",
    "chaitanas_colossal_coaster",
    "diffie_hellman",
    "gross_store",
    "nth_fibonacci_number",
    "calculate_area_of_polygon",
    "coordinate_transformation",
    "valid_parentheses",
    "bottle_song",
    "container_with_most_water",
    "linked_list_cycle",
    "a0201bitwiseandofnumbersrange",
    "random_sample",
    "election_day",
    "a0152maximumproductsubarray",
    "sorting_room",
    "longest_consecutive_sequence",
    "unique_paths",
    "dominoes",
    "a0116populatingnextrightpointersineachnode",
    "roman_numerals",
    "find_two_missing_numbers",
    "a0060permutationsequence",
    "check_if_point_inside_polygon",
    "three_sum",
    "a0094binarytreeinordertraversal",
    "the_farm",
    "robot_simulator",
    "largest_series_product",
    "maximum_depth_of_binary_tree",
    "elons_toy_car",
    "reverse_all_lists",
    "minesweeper_board",
    "all_your_base",
    "queens_problem",
    "find_el_smaller_left_bigger_right",
    "pig_latin_translator",
    "resistor_color",
    "allergies",
    "protein_translation",
    "a0166fractiontorecurringdecimal",
    "jump_game",
    "a0148sortlist",
    "variable_length_quantity",
    "pangram",
    "word_break",
    "find_busiest_interval",
    "climbing_staircase",
    "secrets",
    "find_el_where_k_greater_or_equal",
    "a0079wordsearch",
    "a0096uniquebinarysearchtrees",
    "yacht",
    "poker",
    "animal_magic",
    "minimum_absolute_difference_in_bst",
    "circular_buffer",
    "letter_combinations",
    "a0078subsets",
    "alphametics",
    "binary_tree_right_side_view",
    "react",
    "a0073setmatrixzeros",
    "reverse_words_in_sentence",
    "a0113pathsumii",
    "simple_linked_list",
    "a0102binarytreelevelordertraversal",
    "ransom_note",
    "a0199binarytreerightsideview",
    "airport_robot",
    "permutation_in_string",
    "tree_building",
    "bowling_game_log",
    "bracket_push",
    "odd_sum",
    "transpose",
    "a0062uniquepaths",
    "pascals_triangle",
    "salary_calculator",
    "search_2d_matrix",
    "strain",
    "a0093restore_ip_addresses",
    "nucleotide_count",
    "clock",
    "candy",
    "two_bucket",
    "a0089graycode",
    "difference_of_squares",
    "rotate_array",
    "meetup",
    "rational_numbers",
    "postfix_evaluate",
    "parsing_log_files",
    "a0133clonegraph",
    "find_one_missing_number",
    "evaluate_reverse_polish_notation",
    "trinary",
    "lucky_numbers",
    "flatten_deep_list",
    "markdown",
    "weather_forecast",
    "grep",
    "two_fer",
    "spiral_matrix_builder",
    "leap",
    "isogram",
    "merge_sorted_array",
    "secret_handshake",
    "a0000blank",
    "two_sum",
    "product_of_array_except_self",
    "resistor_color_duo",
    "a0213houserobberii",
    "hello_world",
    "longest_repeating_character_replacement",
    "interest_is_interesting",
    "diamond_printer",
    "a0162findpeakelement",
    "little_sisters_essay",
    "expenses",
    "swap_first_and_last_word",
    "bank_account_action_invalid_exception",
    "savings_account",
    "reverse_integer",
    "little_sisters_vocab",
    "knapsack",
    "luhn",
    "find_peak_element",
    "error_handling",
    "high_scores",
    "sublist",
    "river_sizes",
    "custom_set",
    "a0139wordbreak",
    "perfect_rectangle",
    "wordy",
    "a0131palindromepartitioning",
    "twofer",
    "resistor_color_trio",
    "linked_list",
    "largest_series_product_calculator",
    "series",
    "merge_intervals",
    "lasagna_master",
    "variable_length_quantity",
    "pangram",
    "encode_and_decode_strings",
    "square_root",
    "hexadecimal",
    "jump_game",
    "protein_translation",
    "a0166fractiontorecurringdecimal",
    "allergies",
    "raindrops",
    "set_matrix_zeroes",
    "gotta_snatch_em_all",
    "anagram",
    "find_min_path",
    "circular_buffer",
    "find_missing_number_in_second_array",
    "paasio",
    "poker",
    "a0098validatebinarysearchtree",
    "a0130surroundedregions",
    "binary_tree_right_side_view",
    "a0073setmatrixzeros",
    "alphametics",
    "ordered_digits",
    "food_chain",
    "a0078subsets",
    "queen_attack",
    "letter_combinations",
    "palindrome_products",
    "luhn_validator",
    "annalyns_infiltration",
    "sum_of_multiples",
    "pangram_checker",
    "a0054spiralmatrix",
    "a0102binarytreelevelordertraversal",
    "a0142linkedlistcycleii",
    "reverse_words_in_sentence",
    "a0113pathsumii",
    "collatz_conjecture",
    "pov",
    "tree_building",
    "octal",
    "connect",
    "airport_robot",
    "permutation_in_string",
    "a0199binarytreerightsideview",
    "search_2d_matrix",
    "reverse_ascending_sublists",
    "a0071simplitypath",
    "a0146lrucache",
    "ghost_gobble_arcade_game",
    "armstrong_numbers",
    "salary_calculator",
    "binary_search_tree",
    "a0093restore_ip_addresses",
    "spiral_matrix",
    "nucleotide_count",
    "a0143reorderlist",
    "bob",
    "parallel_letter_frequency",
    "a0086partitionlist",
    "change",
    "anagram_indices",
    "jedliks_toy_car",
    "difference_of_squares",
    "sort_rgb_array",
    "count_consecutive_sums",
    "a0082removeduplicatesfromsortedlistii",
    "amusement_park",
    "a0090subsetsii",
    "pythagorean_triplet",
    "count_triplets_with_sum_k",
    "merge_sorted_array",
    "a0103binarytreezigzaglevelordertraversal",
    "leap",
    "reverse_string",
    "space_age",
    "markdown",
    "house",
    "grep",
    "spiral_matrix_builder",
    "list_ops",
    "resistor_color_duo",
    "hello_world",
    "a0179largestnumber",
    "longest_repeating_character_replacement",
    "a0151reversewordsinastring",
    "swap_first_and_last_word",
    "expenses",
    "a0001twosum",
    "isbn_verifier",
    "kindergarten_garden",
    "sublist",
    "valid_palindrome",
    "knapsack",
    "luhn",
    "find_peak_element",
    "little_sisters_vocab",
    "sieve",
    "matrix",
    "run_length_encoding",
    "a0134gasstation",
    "diamond",
    "a0131palindromepartitioning",
    "wordy",
    "scale_generator",
    "minimum_window_substring",
    "grains",
    "perfect_rectangle",
    "a0139wordbreak",
    "perfect_numbers",
    "merge_intervals",
    "lasagna_master",
    "fancy_sequence",
    "longest_palindromic_substring",
    "valid_sudoku",
    "series",
    "linked_list",
    "twofer",
    "power",
    "number_of_islands",
    "resistor_color_trio",
    "beer_song",
    "a0216combination_sumiii",
    "resistor_color_enum",
    "snakes_and_ladders",
    "making_the_grade",
    "freelancer_rates",
    "a0075sortcolors",
    "longest_common_subsequence",
    "book_store",
    "matching_brackets",
    "find_element_range_sorted_array",
    "find_unpaired",
    "elons_toys",
    "ozans_playlist",
    "forth",
    "ledger",
    "protein_translator",
    "booking_up_for_beauty",
    "contains_duplicate",
    "find_first_missing_positive",
    "a0165compareversionnumbers",
    "minesweeper",
    "twelve_days",
    "prime_factors",
    "killer_sudoku_helper",
    "football_match_reports",
    "rotational_cipher",
    "minimum_size_subarray_sum",
    "shuffle_array",
    "phone_number",
    "accumulate",
    "rectangles",
    "chessboard",
    "summary_ranges",
    "welcome_to_tech_palace",
    "ocr_numbers",
    "bank_account",
    "a0187repeateddnasequences",
    "a0095uniquebinarysearchtreesii",
    "a0129sumroottoleafnumbers",
    "guidos_gorgeous_lasagna",
    "nth_prime",
    "accumulate",
    "captains_log",
    "kth_smallest",
    "a0091decodeways",
    "high_score_board",
    "a0077combinations",
    "count_ip_addresses",
    "simple_cipher",
    "darts",
    "reverse_vowels",
    "prime_calculator",
    "acronym",
    "dnd_character",
    "a0208implementtrieprefixtree",
    "two_sum_ii_input_array_is_sorted",
    "a0105constructbinarytreefrompreorderandinordertraversal",
    "accumulate",
    "proverb",
    "a0200numberofislands",
    "logs_logs_logs",
    "eliuds_eggs",
    "a0209minimumsizesubarraysum",
    "a0210coursescheduleii",
    "squeaky_clean",
    "a0063uniquepathsii",
    "scrabble_score",
    "state_of_tic_tac_toe",
    "a0211addandsearchworddatastructuredesign",
    "power_set",
    "longest_substring_without_repeating_characters",
    "currency_exchange",
    "count_positives",
    "flatten_array",
    "min_stack",
    "meetup_schedule",
    "pig_latin",
    "a0150evaluatereversepolishnotation",
    "binary_search",
    "sliding_window_maximum",
    "optical_character_reader",
    "dn_dcharacter",
    "card_games",
    "log_levels_alt",
    "grade_school",
    "robot_name",
    "gross_store",
    "word_search",
    "saddle_points",
    "calculate_area_of_polygon",
    "diffie_hellman",
    "a0080removeduplicatesfromsortedarrayii",
    "accumulate",
    "atbash_cipher",
    "longest_common_prefix",
    "a0144binarytreepreordertraversal",
    "chaitanas_colossal_coaster",
    "a0061rotatelist",
    "reverse_array",
    "bird_watcher",
    "check_if_two_rectangles_overlap",
    "accumulate",
    "longest_increasing_subarray",
    "dominoes",
    "min_cost_coloring",
    "crypto_square",
    "roman_numerals",
    "triangle",
    "longest_consecutive_sequence",
    "a0138copylistwithrandompointer",
    "a0094binarytreeinordertraversal",
    "the_farm",
    "robot_simulator",
    "a0060permutationsequence",
    "a0059spiralmatrixii",
    "pig_latin_translator",
    "all_your_base",
    "split_coins",
    "reverse_all_lists",
    "minesweeper_board",
    "maximum_depth_of_binary_tree",
    "difference_of_squares_calculator",
    "find_el_smaller_left_bigger_right",
    "queens_problem",
    "split_coins",
    "elons_toy_car",
    "minesweeper_board",
    "maximum_depth_of_binary_tree",
    "difference_of_squares_calculator",
    "three_sum",
    "find_two_missing_numbers",
    "a0060permutationsequence",
    "a0059spiralmatrixii",
    "dominoes",
    "min_cost_coloring",
    "crypto_square",
    "roman_numerals",
    "triangle",
    "longest_consecutive_sequence",
    "a0138copylistwithrandompointer",
    "election_day",
    "bird_watcher",
    "a0201bitwiseandofnumbersrange",
    "check_if_two_rectangles_overlap",
    "accumulate",
    "longest_increasing_subarray",
    "gross_store",
    "word_search",
    "saddle_points",
    "a0080removeduplicatesfromsortedarrayii",
    "diffie_hellman",
    "accumulate",
    "longest_common_prefix",
    "atbash_cipher",
    "reverse_array",
    "a0061rotatelist",
    "pig_latin",
    "meetup_schedule",
    "a0150evaluatereversepolishnotation",
    "sliding_window_maximum",
    "optical_character_reader",
    "card_games",
    "party_robot",
    "log_levels_alt",
    "currency_exchange",
    "longest_substring_without_repeating_characters",
    "count_positives",
    "etl",
    "flatten_array",
    "min_stack",
    "a0209minimumsizesubarraysum",
    "a0210coursescheduleii",
    "a0063uniquepathsii",
    "a0215kthlargestelementinanarray",
    "state_of_tic_tac_toe",
    "a0211addandsearchworddatastructuredesign",
    "power_set",
    "a0208implementtrieprefixtree",
    "a0120triangle",
    "two_sum_ii_input_array_is_sorted",
    "census",
    "accumulate",
    "a0105constructbinarytreefrompreorderandinordertraversal",
    "proverb",
    "a0200numberofislands",
    "eliuds_eggs",
    "logs_logs_logs",
    "need_for_speed",
    "smallest_multiple",
    "darts",
    "reverse_vowels",
    "acronym",
    "dnd_character",
    "accumulate",
    "kth_smallest",
    "captains_log",
    "high_score_board",
    "a0091decodeways",
    "a0077combinations",
    "count_ip_addresses",
    "rectangles",
    "chessboard",
    "cars_assemble",
    "welcome_to_tech_palace",
    "ocr_numbers",
    "a0187repeateddnasequences",
    "a0095uniquebinarysearchtreesii",
    "guidos_gorgeous_lasagna",
    "a0129sumroottoleafnumbers",
    "nth_prime",
    "rotational_cipher",
    "minimum_size_subarray_sum",
    "binary",
    "a0153findminimuminrotatedsortedarray",
    "shuffle_array",
    "phone_number",
    "contains_duplicate",
    "hamming",
    "minesweeper",
    "a0165compareversionnumbers",
    "twelve_days",
    "prime_factors",
    "football_match_reports",
    "find_element_range_sorted_array",
    "find_unpaired",
    "elons_toys",
    "a0207courseschedule",
    "protein_translator",
    "booking_up_for_beauty",
    "a0216combination_sumiii",
    "resistor_color_enum",
    "snakes_and_ladders",
    "log_levels",
    "a0075sortcolors",
    "a0056mergeintervals",
    "a0109convertsortedlisttobinarysearchtree",
    "fancy_sequence",
    "longest_palindromic_substring",
    "series",
    "valid_sudoku",
    "power",
    "twofer",
    "resistor_color_trio",
    "beer_song",
    "number_of_islands",
    "scale_generator",
    "minimum_window_substring",
    "grains",
    "perfect_rectangle",
    "a0139wordbreak",
    "perfect_numbers",
    "high_scores",
    "valid_palindrome",
    "knapsack",
    "sieve",
    "run_length_encoding",
    "matrix",
    "diamond",
    "bank_account_action_invalid_exception",
    "a0134gasstation",
    "little_sisters_essay",
    "expenses",
    "a0001twosum",
    "isbn_verifier",
    "kindergarten_garden",
    "list_ops",
    "product_of_array_except_self",
    "a0179largestnumber",
    "hello_world",
    "longest_repeating_character_replacement",
    "two_sum",
    "a0151reversewordsinastring",
    "a0000blank",
    "count_triplets_with_sum_k",
    "a0103binarytreezigzaglevelordertraversal",
    "leap",
    "reverse_string",
    "space_age",
    "markdown",
    "house",
    "spiral_matrix_builder",
    "two_fer",
    "sort_rgb_array",
    "count_consecutive_sums",
    "a0082removeduplicatesfromsortedlistii",
    "amusement_park",
    "find_one_missing_number",
    "a0090subsetsii",
    "pythagorean_triplet",
    "parallel_letter_frequency",
    "a0133clonegraph",
    "a0086partitionlist",
    "rational_numbers",
    "change",
    "anagram_indices",
    "jedliks_toy_car",
    "difference_of_squares",
    "binary_search_tree",
    "nucleotide_count",
    "spiral_matrix",
    "a0143reorderlist",
    "bob",
    "clock",
    "search_2d_matrix",
    "strain",
    "reverse_ascending_sublists",
    "a0071simplitypath",
    "a0146lrucache",
    "ghost_gobble_arcade_game",
    "armstrong_numbers",
    "salary_calculator",
    "collatz_conjecture",
    "pov",
    "bowling_game_log",
    "connect",
    "octal",
    "annalyns_infiltration",
    "sum_of_multiples",
    "pangram_checker",
    "ransom_note",
    "simple_linked_list",
    "a0054spiralmatrix",
    "a0142linkedlistcycleii",
    "a0113pathsumii",
    "reverse_words_in_sentence",
    "binary_tree_right_side_view",
    "alphametics",
    "ordered_digits",
    "food_chain",
    "a0078subsets",
    "queen_attack",
    "luhn_validator",
    "palindrome_products",
    "animal_magic",
    "circular_buffer",
    "find_missing_number_in_second_array",
    "paasio",
    "a0130surroundedregions",
    "a0098validatebinarysearchtree",
    "yacht",
    "raindrops",
    "secrets",
    "set_matrix_zeroes",
    "gotta_snatch_em_all",
    "anagram",
    "find_busiest_interval",
    "find_min_path",
    "variable_length_quantity",
    "encode_and_decode_strings",
    "square_root",
    "hexadecimal",
    "jump_game",
    "a0166fractiontorecurringdecimal",
    "a0075sortcolors",
    "resistor_color_enum",
    "a0216combination_sumiii",
    "snakes_and_ladders",
    "rna_transcription",
    "mixed_juices",
    "find_element_range_sorted_array",
    "valid_anagram",
    "a0092reverselinkedlistii",
    "find_unpaired",
    "elons_toys",
    "booking_up_for_beauty",
    "protein_translator",
    "tournament",
    "contains_duplicate",
    "prime_factors",
    "football_match_reports",
    "gigasecond",
    "word_count",
    "a0165compareversionnumbers",
    "minesweeper",
    "a0114flattenbinarytreetolinkedlist",
    "twelve_days",
    "shuffle_array",
    "rotational_cipher",
    "minimum_size_subarray_sum",
    "phone_number",
    "welcome_to_tech_palace",
    "rectangles",
    "chessboard",
    "a0095uniquebinarysearchtreesii",
    "a0129sumroottoleafnumbers",
    "guidos_gorgeous_lasagna",
    "nth_prime",
    "ocr_numbers",
    "a0187repeateddnasequences",
    "accumulate",
    "a0091decodeways",
    "high_score_board",
    "a0077combinations",
    "count_ip_addresses",
    "captains_log",
    "kth_smallest",
    "basic_calculator",
    "dnd_character",
    "acronym",
    "reverse_vowels",
    "darts",
    "a0208implementtrieprefixtree",
    "two_sum_ii_input_array_is_sorted",
    "a0105constructbinarytreefrompreorderandinordertraversal",
    "accumulate",
    "logs_logs_logs",
    "eliuds_eggs",
    "proverb",
    "a0200numberofislands",
    "a0063uniquepathsii",
    "a0209minimumsizesubarraysum",
    "accumulate",
    "a0210coursescheduleii",
    "state_of_tic_tac_toe",
    "power_set",
    "a0211addandsearchworddatastructuredesign",
    "longest_substring_without_repeating_characters",
    "currency_exchange",
    "complex_numbers",
    "count_positives",
    "flatten_array",
    "min_stack",
    "sliding_window_maximum",
    "card_games",
    "optical_character_reader",
    "zebra_puzzle",
    "a0150evaluatereversepolishnotation",
    "meetup_schedule",
    "pig_latin",
    "log_levels_alt",
    "diffie_hellman",
    "a0080removeduplicatesfromsortedarrayii",
    "gross_store",
    "word_search",
    "saddle_points",
    "count_divisibles_in_range",
    "queen",
    "a0061rotatelist",
    "reverse_array",
    "accumulate",
    "atbash_cipher",
    "longest_common_prefix",
    "bird_watcher",
    "check_if_two_rectangles_overlap",
    "random_sample",
    "valid_parentheses",
    "longest_increasing_subarray",
    "accumulate",
    "container_with_most_water",
    "linked_list_cycle",
    "dominoes",
    "min_cost_coloring",
    "roman_numerals",
    "crypto_square",
    "a0138copylistwithrandompointer",
    "a0152maximumproductsubarray",
    "triangle",
    "longest_consecutive_sequence",
    "a0060permutationsequence",
    "a0059spiralmatrixii",
    "check_if_point_inside_polygon",
    "resistor_color",
    "maximum_depth_of_binary_tree",
    "difference_of_squares_calculator",
    "split_coins",
    "minesweeper_board",
    "square_root",
    "jump_game",
    "hexadecimal",
    "variable_length_quantity",
    "word_break",
    "encode_and_decode_strings",
    "a0166fractiontorecurringdecimal",
    "find_el_where_k_greater_or_equal",
    "gotta_snatch_em_all",
    "set_matrix_zeroes",
    "raindrops",
    "find_min_path",
    "anagram",
    "paasio",
    "find_missing_number_in_second_array",
    "minimum_absolute_difference_in_bst",
    "circular_buffer",
    "a0098validatebinarysearchtree",
    "a0130surroundedregions",
    "food_chain",
    "alphametics",
    "ordered_digits",
    "binary_tree_right_side_view",
    "palindrome_products",
    "luhn_validator",
    "queen_attack",
    "a0078subsets",
    "pangram_checker",
    "sum_of_multiples",
    "annalyns_infiltration",
    "reverse_words_in_sentence",
    "a0113pathsumii",
    "a0054spiralmatrix",
    "a0142linkedlistcycleii",
    "octal",
    "connect",
    "pov",
    "bracket_push",
    "transpose",
    "collatz_conjecture",
    "a0146lrucache",
    "search_2d_matrix",
    "a0071simplitypath",
    "reverse_ascending_sublists",
    "ghost_gobble_arcade_game",
    "armstrong_numbers",
    "salary_calculator",
    "candy",
    "binary_search_tree",
    "spiral_matrix",
    "nucleotide_count",
    "a0143reorderlist",
    "bob",
    "a0086partitionlist",
    "meetup",
    "change",
    "parsing_log_files",
    "parallel_letter_frequency",
    "jedliks_toy_car",
    "anagram_indices",
    "difference_of_squares",
    "a0082removeduplicatesfromsortedlistii",
    "sort_rgb_array",
    "count_consecutive_sums",
    "pythagorean_triplet",
    "a0090subsetsii",
    "amusement_park",
    "evaluate_reverse_polish_notation",
    "a0103binarytreezigzaglevelordertraversal",
    "reverse_string",
    "leap",
    "count_triplets_with_sum_k",
    "secret_handshake",
    "flatten_deep_list",
    "markdown",
    "lucky_numbers",
    "weather_forecast",
    "spiral_matrix_builder",
    "house",
    "space_age",
    "longest_repeating_character_replacement",
    "hello_world",
    "a0179largestnumber",
    "list_ops",
    "a0151reversewordsinastring",
    "expenses",
    "interest_is_interesting",
    "kindergarten_garden",
    "a0001twosum",
    "isbn_verifier",
    "diamond_printer",
    "knapsack",
    "valid_palindrome",
    "sieve",
    "a0134gasstation",
    "diamond",
    "matrix",
    "run_length_encoding",
    "reverse_integer",
    "perfect_rectangle",
    "grains",
    "scale_generator",
    "minimum_window_substring",
    "perfect_numbers",
    "custom_set",
    "river_sizes",
    "a0139wordbreak",
    "fancy_sequence",
    "valid_sudoku",
    "series",
    "longest_palindromic_substring",
    "twofer",
    "power",
    "number_of_islands",
    "resistor_color_trio",
    "beer_song",
    "fancy_sequence",
    "series",
    "valid_sudoku",
    "largest_series_product_calculator",
    "longest_palindromic_substring",
    "power",
    "twofer",
    "resistor_color_trio",
    "beer_song",
    "number_of_islands",
    "perfect_rectangle",
    "grains",
    "scale_generator",
    "minimum_window_substring",
    "perfect_numbers",
    "a0139wordbreak",
    "knapsack",
    "valid_palindrome",
    "error_handling",
    "sieve",
    "diamond",
    "a0134gasstation",
    "run_length_encoding",
    "matrix",
    "savings_account",
    "expenses",
    "kindergarten_garden",
    "a0001twosum",
    "a0162findpeakelement",
    "isbn_verifier",
    "longest_repeating_character_replacement",
    "a0179largestnumber",
    "hello_world",
    "a0213houserobberii",
    "list_ops",
    "a0151reversewordsinastring",
    "a0103binarytreezigzaglevelordertraversal",
    "reverse_string",
    "leap",
    "count_triplets_with_sum_k",
    "isogram",
    "markdown",
    "spiral_matrix_builder",
    "house",
    "space_age",
    "a0082removeduplicatesfromsortedlistii",
    "sort_rgb_array",
    "trinary",
    "count_consecutive_sums",
    "pythagorean_triplet",
    "a0090subsetsii",
    "debug_java_entries_1",
    "amusement_park",
    "a0086partitionlist",
    "change",
    "parallel_letter_frequency",
    "postfix_evaluate",
    "jedliks_toy_car",
    "two_bucket",
    "anagram_indices",
    "difference_of_squares",
    "a0089graycode",
    "rotate_array",
    "binary_search_tree",
    "nucleotide_count",
    "spiral_matrix",
    "a0143reorderlist",
    "bob",
    "a0146lrucache",
    "search_2d_matrix",
    "a0071simplitypath",
    "reverse_ascending_sublists",
    "ghost_gobble_arcade_game",
    "armstrong_numbers",
    "a0062uniquepaths",
    "salary_calculator",
    "pascals_triangle",
    "connect",
    "octal",
    "pov",
    "odd_sum",
    "collatz_conjecture",
    "pangram_checker",
    "sum_of_multiples",
    "annalyns_infiltration",
    "a0113pathsumii",
    "reverse_words_in_sentence",
    "a0054spiralmatrix",
    "a0142linkedlistcycleii",
    "food_chain",
    "alphametics",
    "ordered_digits",
    "binary_tree_right_side_view",
    "react",
    "luhn_validator",
    "palindrome_products",
    "queen_attack",
    "a0078subsets",
    "paasio",
    "find_missing_number_in_second_array",
    "circular_buffer",
    "a0130surroundedregions",
    "a0098validatebinarysearchtree",
    "gotta_snatch_em_all",
    "set_matrix_zeroes",
    "a0079wordsearch",
    "a0096uniquebinarysearchtrees",
    "raindrops",
    "find_min_path",
    "climbing_staircase",
    "anagram",
    "square_root",
    "a0148sortlist",
    "jump_game",
    "hexadecimal",
    "variable_length_quantity",
    "encode_and_decode_strings",
    "a0166fractiontorecurringdecimal",
    "maximum_depth_of_binary_tree",
    "difference_of_squares_calculator",
    "split_coins",
    "minesweeper_board",
    "largest_series_product",
    "a0060permutationsequence",
    "a0059spiralmatrixii",
    "unique_paths",
    "dominoes",
    "min_cost_coloring",
    "roman_numerals",
    "a0116populatingnextrightpointersineachnode",
    "crypto_square",
    "a0138copylistwithrandompointer",
    "triangle",
    "longest_consecutive_sequence",
    "sorting_room",
    "bird_watcher",
    "check_if_two_rectangles_overlap",
    "longest_increasing_subarray",
    "accumulate",
    "bottle_song",
    "a0080removeduplicatesfromsortedarrayii",
    "diffie_hellman",
    "gross_store",
    "word_search",
    "coordinate_transformation",
    "nth_fibonacci_number",
    "saddle_points",
    "reverse_array",
    "a0061rotatelist",
    "accumulate",
    "longest_common_prefix",
    "atbash_cipher",
    "sliding_window_maximum",
    "card_games",
    "optical_character_reader",
    "vehicle_purchase",
    "a0150evaluatereversepolishnotation",
    "pig_latin",
    "sum_non_adjecent",
    "meetup_schedule",
    "log_levels_alt",
    "currency_exchange",
    "longest_substring_without_repeating_characters",
    "count_positives",
    "flatten_array",
    "min_stack",
    "a0063uniquepathsii",
    "a0209minimumsizesubarraysum",
    "a0210coursescheduleii",
    "state_of_tic_tac_toe",
    "power_set",
    "a0211addandsearchworddatastructuredesign",
    "rail_fence_cipher",
    "a0208implementtrieprefixtree",
    "two_sum_ii_input_array_is_sorted",
    "accumulate",
    "a0105constructbinarytreefrompreorderandinordertraversal",
    "eliuds_eggs",
    "logs_logs_logs",
    "proverb",
    "a0200numberofislands",
    "dnd_character",
    "acronym",
    "reverse_vowels",
    "darts",
    "blackjack",
    "accumulate",
    "say",
    "high_score_board",
    "a0091decodeways",
    "a0055jumpgame",
    "a0077combinations",
    "count_ip_addresses",
    "kth_smallest",
    "a0074search2dmatrix",
    "captains_log",
    "welcome_to_tech_palace",
    "rectangles",
    "chessboard",
    "a0095uniquebinarysearchtreesii",
    "guidos_gorgeous_lasagna",
    "a0129sumroottoleafnumbers",
    "nth_prime",
    "ocr_numbers",
    "a0187repeateddnasequences",
    "best_time_to_buy_and_sell_stock",
    "majority_element",
    "shuffle_array",
    "a0064minimumpathsum",
    "rotational_cipher",
    "min_swaps",
    "minimum_size_subarray_sum",
    "lasagna",
    "phone_number",
    "a0127wordladder",
    "contains_duplicate",
    "a0147insertionsortlist",
    "meteorology",
    "prime_factors",
    "football_match_reports",
    "minesweeper",
    "a0165compareversionnumbers",
    "twelve_days",
    "find_element_range_sorted_array",
    "find_unpaired",
    "elons_toys",
    "booking_up_for_beauty",
    "protein_translator",
    "palindrome_integer",
    "bowling",
    "a0075sortcolors",
    "resistor_color_enum",
    "a0216combination_sumiii",
    "snakes_and_ladders",
    "card_tricks",
]


@dataclass
class ExecutionStatus:
    """Classe per tracciare lo stato di esecuzione di un cluster"""

    cluster_name: str
    total_executions: int = 0
    correct_executions: int = 0
    incorrect_entries: List[Dict] = field(default_factory=list)

    @property
    def completion_percentage(self) -> float:
        return (
            (self.correct_executions / self.total_executions * 100)
            if self.total_executions > 0
            else 0
        )

    @property
    def status(self) -> str:
        if self.correct_executions == 0:
            return "not_executed"
        elif self.correct_executions == self.total_executions:
            return "fully_executed"
        else:
            return "partially_executed"

    @property
    def error_percentage(self) -> float:
        """Calcola la percentuale di entries con errori"""
        if not hasattr(self, "_total_entries") or self._total_entries == 0:
            return 0.0
        return (len(self.incorrect_entries) / self._total_entries) * 100


@dataclass
class ClusterAnalysisResults:
    """Classe per contenere i risultati dell'analisi dei cluster"""

    base_clusters: Dict[str, ExecutionStatus] = field(default_factory=dict)
    llm_clusters: Dict[str, ExecutionStatus] = field(default_factory=dict)

    def get_statistics(self, cluster_type: str) -> Dict[str, int]:
        clusters = self.base_clusters if cluster_type == "base" else self.llm_clusters
        stats = {
            "fully_executed": 0,
            "partially_executed": 0,
            "not_executed": 0,
            "total": len(clusters),
        }

        for status in clusters.values():
            stats[status.status] += 1

        return stats


def is_entry_correct(entry: Dict) -> bool:
    """
    Verifica se un'entry √® corretta controllando la presenza dei campi obbligatori
    """
    required_base_fields = [
        "CPU_usage",
        "RAM_usage",
        "execution_time_ms",
        "regrationTestPassed",
        "base_log",
    ]
    required_llm_fields = [
        "CPU_usage",
        "RAM_usage",
        "execution_time_ms",
        "regrationTestPassed",
    ]

    # Se ha LLM_results, controlla i campi LLM
    if "LLM_results" in entry:
        if not isinstance(entry["LLM_results"], list):
            return False

        for llm_result in entry["LLM_results"]:
            if not all(field in llm_result for field in required_llm_fields):
                return False
        return True
    else:
        # Altrimenti controlla i campi base
        return all(field in entry for field in required_base_fields)


def parse_filename(filename: str) -> Tuple[str, str, int, int]:
    """
    Parsea il nome del file per estrarre informazioni
    Returns: (cluster_name, file_type, prompt_version, execution_number)
    file_type: 'base' o 'llm'
    """
    # Rimuovi estensione .json
    basename = filename.replace(".json", "")

    # Pattern per file LLM: {cluster_name}_results_v{prompt_version}_{execution_number}
    if "_results_v" in basename:
        parts = basename.split("_results_v")
        cluster_name = parts[0]

        # Estrai prompt_version e execution_number
        version_exec = parts[1]
        if "_" in version_exec:
            prompt_version_str, execution_number_str = version_exec.split("_", 1)
        else:
            prompt_version_str = version_exec
            execution_number_str = "1"

        try:
            prompt_version = int(prompt_version_str)
            execution_number = int(execution_number_str)
        except ValueError:
            prompt_version = 1
            execution_number = 1

        return cluster_name, "llm", prompt_version, execution_number

    # Pattern per file base: {cluster_name}_results_{execution_number}
    elif "_results_" in basename:
        parts = basename.split("_results_")
        cluster_name = parts[0]

        try:
            execution_number = int(parts[1])
        except (ValueError, IndexError):
            execution_number = 1

        return cluster_name, "base", 1, execution_number

    # Pattern per file base senza numero: {cluster_name}_results
    elif basename.endswith("_results"):
        cluster_name = basename.replace("_results", "")
        return cluster_name, "base", 1, 1

    # Fallback
    return basename, "base", 1, 1


def analyze_output_file(
    filepath: str, filename: str
) -> Tuple[str, str, int, List[Dict], int]:
    """
    Analizza un singolo file di output
    Returns: (cluster_name, file_type, correct_entries_count, incorrect_entries_list, total_entries_count)
    """
    cluster_name, file_type, prompt_version, execution_number = parse_filename(filename)

    try:
        with open(filepath, "r", encoding="utf-8") as f:
            content = json.load(f)
    except (json.JSONDecodeError, FileNotFoundError) as e:
        print(f"‚ö†Ô∏è Error reading file {filename}: {e}")
        return (
            cluster_name,
            file_type,
            0,
            [
                {
                    "filename": filename,
                    "entry_id": "FILE_ERROR",
                    "cluster_name": cluster_name,
                    "error": str(e),
                }
            ],
            1,
        )

    if not content or "results" not in content:
        return (
            cluster_name,
            file_type,
            0,
            [
                {
                    "filename": filename,
                    "entry_id": "NO_RESULTS",
                    "cluster_name": cluster_name,
                }
            ],
            1,
        )

    results = content["results"]
    correct_count = 0
    incorrect_entries = []
    total_entries = 0

    for language, entries in results.items():
        if not isinstance(entries, list):
            continue

        for entry in entries:
            total_entries += 1
            entry_id = entry.get("id", "UNKNOWN_ID")

            if is_entry_correct(entry):
                correct_count += 1
            else:
                incorrect_entries.append(
                    {
                        "filename": filename,
                        "entry_id": entry_id,
                        "cluster_name": cluster_name,
                        "language": language,
                        "missing_fields": [
                            field
                            for field in [
                                "CPU_usage",
                                "RAM_usage",
                                "execution_time_ms",
                                "regrationTestPassed",
                                "base_log",
                            ]
                            if field not in entry
                        ],
                    }
                )

    return cluster_name, file_type, correct_count, incorrect_entries, total_entries


def check_clusters_already_executed():
    """
    Funzione migliorata per analizzare lo stato di esecuzione dei cluster
    """
    print("üîç Analyzing cluster execution status...\n")

    runned_base = []
    runned_llm = []

    output_dir = utility_paths.OUTPUT_DIR_FILEPATH
    if not os.path.exists(output_dir):
        print(f"‚ùå Output directory not found: {output_dir}")
        return

    results = ClusterAnalysisResults()

    # Analizza tutti i file di output
    for filename in os.listdir(output_dir):
        if not filename.endswith(".json"):
            continue

        filepath = os.path.join(output_dir, filename)
        cluster_name, file_type, correct_count, incorrect_entries, total_entries = (
            analyze_output_file(filepath, filename)
        )

        if correct_count > 0:
            if file_type == "base" and cluster_name not in runned_base:
                runned_base.append(cluster_name)
            elif cluster_name not in runned_llm:
                runned_llm.append(cluster_name)

        # Seleziona il dizionario appropriato
        clusters_dict = (
            results.base_clusters if file_type == "base" else results.llm_clusters
        )

        # Inizializza o aggiorna lo status del cluster
        if cluster_name not in clusters_dict:
            clusters_dict[cluster_name] = ExecutionStatus(cluster_name)
            clusters_dict[cluster_name]._total_entries = 0

        status = clusters_dict[cluster_name]
        status.total_executions += 1
        status._total_entries += total_entries

        # Calcola la percentuale di errore per questo file
        error_percentage = (
            (len(incorrect_entries) / total_entries * 100) if total_entries > 0 else 100
        )

        # Considera il file come eseguito se ha meno del 30% di errori
        if error_percentage <= 30:
            status.correct_executions += 1

        # Aggiungi sempre le entries incorrette per il tracking
        status.incorrect_entries.extend(incorrect_entries)

    # Stampa risultati
    print_analysis_results(results, runned_base, runned_llm)

    return results


def print_analysis_results(results: ClusterAnalysisResults, runned_base, runned_llm):
    """Stampa i risultati dell'analisi in modo formattato"""

    available_c = get_available_clusters()
    total_cluster_quantity = len(available_c)

    def print_cluster_category(
        clusters_dict: Dict[str, ExecutionStatus], category: str, cluster_type: str
    ):
        filtered_clusters = {
            name: status
            for name, status in clusters_dict.items()
            if status.status == category
        }

        if not filtered_clusters:
            print("  üìã None")
            return

        for name, status in filtered_clusters.items():
            completion = status.completion_percentage
            error_pct = (
                status.error_percentage if hasattr(status, "error_percentage") else 0
            )
            print(
                f"  üìã {name} ({status.correct_executions}/{status.total_executions} executions - {completion:.1f}%) [errors: {error_pct:.1f}%]"
            )

            # Mostra entries incorrette per cluster parzialmente eseguiti
            if category == "partially_executed" and status.incorrect_entries:
                print(f"      ‚ö†Ô∏è  Incorrect entries: {len(status.incorrect_entries)}")
                for entry in status.incorrect_entries[:3]:  # Mostra solo le prime 3
                    entry_id = entry.get("entry_id", "UNKNOWN")
                    filename = entry.get("filename", "UNKNOWN")
                    print(f"         - {entry_id} in {filename}")
                if len(status.incorrect_entries) > 3:
                    print(
                        f"         - ... and {len(status.incorrect_entries) - 3} more"
                    )

    def print_statistics(cluster_type: str):
        stats = results.get_statistics(cluster_type)
        total = stats["total"]

        if total == 0:
            print(f"üìä No {cluster_type} clusters found\n")
            return

        print(f"üìä {cluster_type.upper()} CLUSTERS STATISTICS:")
        print(f"  Total clusters: {total}")
        print(
            f"  ‚úÖ Fully executed: {stats['fully_executed']} ({stats['fully_executed'] / total * 100:.1f}%)"
        )
        print(
            f"  üî∂ Partially executed: {stats['partially_executed']} ({stats['partially_executed'] / total * 100:.1f}%)"
        )
        print(
            f"  ‚ùå Not executed: {stats['not_executed']} ({stats['not_executed'] / total * 100:.1f}%)"
        )
        print()

    # Stampa statistiche generali
    print("=" * 60)
    print("üìà CLUSTER EXECUTION ANALYSIS RESULTS")
    print("=" * 60)

    print_statistics("base")
    print_statistics("llm")

    # Dettaglio per tipo di cluster
    for cluster_type, clusters_dict in [
        ("BASE", results.base_clusters),
        ("LLM", results.llm_clusters),
    ]:
        if not clusters_dict:
            continue

        print(f"\nüîç {cluster_type} CLUSTERS DETAILED STATUS:")
        print("-" * 40)

        print("‚úÖ FULLY EXECUTED CLUSTERS:")
        print_cluster_category(clusters_dict, "fully_executed", cluster_type.lower())

        print("\nüî∂ PARTIALLY EXECUTED CLUSTERS:")
        print_cluster_category(
            clusters_dict, "partially_executed", cluster_type.lower()
        )

        print("\n‚ùå NOT EXECUTED CLUSTERS:")
        print_cluster_category(clusters_dict, "not_executed", cluster_type.lower())

        print()

    # Summary finale
    base_stats = results.get_statistics("base")
    llm_stats = results.get_statistics("llm")
    total_clusters = base_stats["total"] + llm_stats["total"]
    total_completed = base_stats["fully_executed"] + llm_stats["fully_executed"]

    print("=" * 60)
    print("üéØ FINAL SUMMARY:")
    print(f"  Total clusters analyzed: {total_clusters}")
    print(
        f"  Total fully completed: {total_completed} ({total_completed / total_clusters * 100:.1f}%)"
    )
    print("=" * 60)

    """ 

    # Stampa gli array di clusters eseguiti per uso futuro
    print("\nüìù CLUSTERS ARRAYS FOR FUTURE REFERENCE:")
    print("-" * 50)

    # Base clusters eseguiti
    fully_executed_base = [
        name
        for name, status in results.base_clusters.items()
        if status.status == "fully_executed"
    ]
    if fully_executed_base:
        print("üîµ FULLY EXECUTED BASE CLUSTERS:")
        print(f"clusters_already_processed_base = {fully_executed_base}")
        print()

    # LLM clusters eseguiti
    fully_executed_llm = [
        name
        for name, status in results.llm_clusters.items()
        if status.status == "fully_executed"
    ]
    if fully_executed_llm:
        print("üü° FULLY EXECUTED LLM CLUSTERS:")
        print(f"clusters_already_processed_llm = {fully_executed_llm}")
        print()

    # Combinato (tutti i clusters completamente eseguiti)
    all_fully_executed = list(set(fully_executed_base + fully_executed_llm))
    if all_fully_executed:
        print("üü¢ ALL FULLY EXECUTED CLUSTERS (COMBINED):")
        print(f"clusters_already_processed = {sorted(all_fully_executed)}")
        print()

    
    print(
        f"\n(base) Clusters executed in this run ({len(base_cluster_processed_in_this_exec)}):\n{base_cluster_processed_in_this_exec}"
    )
    print(
        f"\n(llm) Clusters executed in this run ({len(llm_cluster_processed_in_this_exec)}):\n{llm_cluster_processed_in_this_exec}"
    )

    print(
        f"\nRunned BASE ({len(runned_base)}/{total_clusters} : {len(runned_base) / total_cluster_quantity * 100}%) (at least 1 correct runned entry in output file):\n{runned_base}"
    )
    print(
        f"\nRunned LLM({len(runned_llm)}/{total_clusters} : {len(runned_llm) / total_cluster_quantity * 100}%) (at least 1 correct runned entry in output file):\n{runned_llm}"
    )
    """

   


def get_available_clusters():
    """Ottiene tutti i cluster (names) disponibili"""
    available_clusters = []

    for cluster_name in os.listdir(utility_paths.CLUSTERS_DIR_FILEPATH):
        if (
            "with_metrics" in cluster_name
            or "debug_" in cluster_name
            or "focused_" in cluster_name
            or "bad_entries" in cluster_name
        ):
            continue

        cluster_name = cluster_name.replace("cluster_", "").removesuffix(".json")

        available_clusters.append(cluster_name)

    return available_clusters


def run_cluster_tests_base_snippet_code(cluster_name):
    """Esegue tutti i test per un singolo cluster"""
    start_time = time.time()
    print(f"\nüèÅ Starting tests for cluster: {cluster_name}")

    try:
        # 1. Esegui test BASE (5 volte)
        print(f">>> Running BASE tests for {cluster_name}")
        base_result = subprocess.run(
            [
                "python3",
                "run_tests.py",
                "--base-only",
                "--cluster-name",
                f"cluster_{cluster_name}",
                "--output-file",
                f"{cluster_name}_results",
                "--webhook",
                "--silent",
                "--run_quantity",
                "5",
                "--prompt-version",
                "1",
            ],
            capture_output=True,
            text=True,
        )

        # print(f"BASE test output for {cluster_name}:\n{base_result.stdout}\n{base_result.stderr}")

        if base_result.returncode != 0:
            print(f"‚ùå ERROR in BASE tests for {cluster_name}: {base_result.stderr}")
            return False

        # 2. Esegui test LLM per ogni versione del prompt (1-4)
        """for v in range(1, 5):
            print(f">>> Running LLM prompts v{v} for {cluster_name}")
            llm_result = subprocess.run(
                [
                    "python3",
                    "run_tests.py",
                    "--llm-only",
                    "--cluster-name",
                    f"cluster_{cluster_name}",
                    "--output-file",
                    f"{cluster_name}_results_v{v}",
                    "--webhook",
                    "--silent",
                    "--run_quantity",
                    "5",
                    "--prompt-version",
                    str(v),
                ],
                capture_output=True,
                text=True,
            )

            # print(f"LLM test output for {cluster_name}:\n{base_result.stdout}\n{base_result.stderr}")

            if llm_result.returncode != 0:
                print(
                    f"ERROR in LLM v{v} tests for {cluster_name}: {llm_result.stderr}"
                )
                return False
        """
        
        elapsed_time = time.time() - start_time
        print(
            f"‚úÖ Completed all tests for {cluster_name} in {elapsed_time:.2f} seconds"
        )
        return True

    except Exception as e:
        print(f"EXCEPTION in cluster {cluster_name}: {str(e)}")
        return False


def run_cluster_tests_LLM(cluster_name):
    """Esegue tutti i test per un singolo cluster"""
    start_time = time.time()
    print(f"\nüèÅ Starting tests for cluster: {cluster_name}")

    try:
        # Esegui test LLM per ogni versione del prompt (1-4)
        for v in range(1, 5):
            print(f">>> Running LLM prompts v{v} for {cluster_name}")
            llm_result = subprocess.run(
                [
                    "python3",
                    "run_tests.py",
                    "--llm-only",
                    "--cluster-name",
                    f"cluster_{cluster_name}",
                    "--output-file",
                    f"{cluster_name}_results_v{v}",
                    "--webhook",
                    "--silent",
                    "--run_quantity",
                    "5",
                    "--prompt-version",
                    str(v),
                ],
                capture_output=True,
                text=True,
            )

            print(f"LLM res for  prompts v{v} for {cluster_name}:\n{llm_result}")

            if llm_result.returncode != 0:
                print(
                    f"ERROR in LLM v{v} tests for {cluster_name}: {llm_result.stderr}"
                )
                return False

        elapsed_time = time.time() - start_time
        print(
            f"‚úÖ Completed all LLM tests for {cluster_name} in {elapsed_time:.2f} seconds"
        )
        return True

    except Exception as e:
        print(f"EXCEPTION in cluster {cluster_name}: {str(e)}")
        return False


def run_base(available_clusters):
    start_time = time.time()
    total = len(available_clusters) - len(clusters_already_processed_base)
    total_success = 0
    total_failed = 0
    for i, cluster in enumerate(available_clusters):
        cluster = cluster.replace("cluster_", "")
        cluster = cluster.replace(".json", "")
        if cluster not in clusters_already_processed_base and cluster not in runned_base:
            if run_cluster_tests_base_snippet_code(cluster):
                clusters_already_processed_base.append(cluster)
                base_cluster_processed_in_this_exec.append(cluster)
                total_success += 1
                print(
                    f"\nüü¢ Executed base cluster {cluster} | {i}/{total} -> {(i / total * 100):.2f}%"
                )
            else:
                total_failed += 1
                print(
                    f"\nüî¥ Failed to executed base cluster {cluster} | {i}/{total} -> {(i / total * 100):.2f}%"
                )

        else:
            print(f"\nüü° Skipping cluster {cluster}, already runned | {i}/{total} -> {(i / total * 100):.2f}%")
    # Statistiche finali
    total_elapsed = time.time() - start_time

    print("\nüéØ FINAL RESULTS (base):")
    print(f"Total clusters processed: {total}")
    print(f"Successful: {total_success}")
    print(f"Failed: {total_failed}")
    print(f"Total execution time: {total_elapsed:.2f} seconds")
    print(f"Average time per cluster: {total_elapsed / total:.2f} seconds")

    if total_failed > 0:
        print(f"\n‚ö†Ô∏è  {total_failed} clusters failed. Check the logs above for details.")
        return False
    else:
        print("\nüéâ All base clusters completed successfully!")
        return True


def run_llm(available_clusters):
    start_time = time.time()
    total = len(available_clusters) - len(clusters_already_processed_llm)
    total_success = 0
    total_failed = 0
    for i, cluster in enumerate(available_clusters):
        if cluster not in clusters_already_processed_llm and cluster not in runned_llm:
            if run_cluster_tests_LLM(cluster):
                total_success += 1
                clusters_already_processed_llm.append(cluster)
                llm_cluster_processed_in_this_exec.append(cluster)
                print(
                    f"\nüü¢ Executed LLM cluster {cluster} | {i}/{total} -> {(i / total * 100):.2f}%"
                )
            else:
                total_failed += 1
                print(
                    f"\nüî¥ Failed to execute LLM cluster {cluster} | {i}/{total} -> {(i / total * 100):.2f}%"
                )
        else:
            print(f"\nüü° Skipping cluster {cluster}, already runned | {i}/{total} -> {(i / total * 100):.2f}%")

    # Statistiche finali
    total_elapsed = time.time() - start_time

    print("\nüéØ FINAL RESULTS (LLM):")
    print(f"Total clusters processed: {total}")
    print(f"Successful: {total_success}")
    print(f"Failed: {total_failed}")
    print(f"Total execution time: {total_elapsed:.2f} seconds")
    print(f"Average time per cluster: {total_elapsed / total:.2f} seconds")

    if total_failed > 0:
        print(f"\n‚ö†Ô∏è  {total_failed} clusters failed. Check the logs above for details.")
        return False
    else:
        print("\nüéâ All LLM clusters completed successfully!")
        return True


def main():
    """Funzione principale che orchestrare l'esecuzione parallela"""

    # Ottieni tutti i cluster disponibili
    available_clusters = get_available_clusters()

    if not available_clusters:
        print("No clusters available for processing.")
        return

    print(
        f"Found {len(available_clusters)} clusters:\n{len(available_clusters) - len(clusters_already_processed_base)} base clusters to process\n{len(available_clusters) - len(clusters_already_processed_llm)} LLM clusters to process"
    )

    # run_base(available_clusters) # to do debug clusters and then run them again
    run_llm(available_clusters)


if __name__ == "__main__":
    atexit.register(check_clusters_already_executed)
    success = main()
    exit(0 if success else 1)
