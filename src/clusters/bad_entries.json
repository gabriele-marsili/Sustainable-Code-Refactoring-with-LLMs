{
    "entries": [
        {
            "id": "Java_change_Exercism (java_rabestro)",
            "error_message": "\u274c\u203c Errore nel container Java_change_Exercism (java_rabestro) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/change_Exercism_java_rabestro:/app', 'test_java_persistant', 'ChangeCalculator.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nChangeCalculator.java:1: error: package change does not exist\\nimport change.AmountToChangeFunction;\\n             ^\\nChangeCalculator.java:2: error: package change does not exist\\nimport change.OptimalAlgorithm;\\n             ^\\nChangeCalculator.java:7: error: cannot find symbol\\n    private final AmountToChangeFunction amountToChangeFunction;\\n                  ^\\n  symbol:   class AmountToChangeFunction\\n  location: class ChangeCalculator\\nChangeCalculator.java:10: error: cannot find symbol\\n        amountToChangeFunction = new OptimalAlgorithm(denominations);\\n                                     ^\\n  symbol:   class OptimalAlgorithm\\n  location: class ChangeCalculator\\n4 errors\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/change_Exercism_java_rabestro/output.log",
            "language": "Java"
        },
        {
            "id": "Java_circular_buffer_Exercism (java_rabestro)",
            "error_message": "\u274c\u203c Errore nel container Java_circular_buffer_Exercism (java_rabestro) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/circular_buffer_Exercism_java_rabestro:/app', 'test_java_persistant', 'CircularBuffer.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nCircularBuffer.java:11: error: cannot find symbol\\n    T read() throws BufferIOException {\\n                    ^\\n  symbol:   class BufferIOException\\n  location: class CircularBuffer<T>\\n  where T is a type-variable:\\n    T extends Object declared in class CircularBuffer\\nCircularBuffer.java:16: error: cannot find symbol\\n    void write(T data) throws BufferIOException {\\n                              ^\\n  symbol:   class BufferIOException\\n  location: class CircularBuffer<T>\\n  where T is a type-variable:\\n    T extends Object declared in class CircularBuffer\\nCircularBuffer.java:28: error: cannot find symbol\\n    private void ensureBufferIsNotEmpty() throws BufferIOException {\\n                                                 ^\\n  symbol:   class BufferIOException\\n  location: class CircularBuffer<T>\\n  where T is a type-variable:\\n    T extends Object declared in class CircularBuffer\\nCircularBuffer.java:34: error: cannot find symbol\\n    private void ensureBufferIsNotFull() throws BufferIOException {\\n                                                ^\\n  symbol:   class BufferIOException\\n  location: class CircularBuffer<T>\\n  where T is a type-variable:\\n    T extends Object declared in class CircularBuffer\\nCircularBufferTest.java:18: error: cannot find symbol\\n    public void canReadItemJustWritten() throws BufferIOException {\\n                                                ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:26: error: cannot find symbol\\n    public void canReadItemOnlyOnce() throws BufferIOException {\\n                                             ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:38: error: cannot find symbol\\n    public void readsItemsInOrderWritten() throws BufferIOException {\\n                                                  ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:48: error: cannot find symbol\\n    public void fullBufferCantBeWrittenTo() throws BufferIOException {\\n                                                   ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:59: error: cannot find symbol\\n    public void readFreesUpSpaceForWrite() throws BufferIOException {\\n                                                  ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:69: error: cannot find symbol\\n    public void maintainsReadPositionAcrossWrites() throws BufferIOException {\\n                                                           ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:81: error: cannot find symbol\\n    public void cantReadClearedItems() throws BufferIOException {\\n                                              ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:93: error: cannot find symbol\\n    public void clearFreesUpCapacity() throws BufferIOException {\\n                                              ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:103: error: cannot find symbol\\n    public void clearDoesNothingOnEmptyBuffer() throws BufferIOException {\\n                                                       ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:112: error: cannot find symbol\\n    public void overwriteActsLikeWriteOnNonFullBuffer() throws BufferIOException {\\n                                                               ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:122: error: cannot find symbol\\n    public void overwriteRemovesOldestElementOnFullBuffer() throws BufferIOException {\\n                                                                   ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:133: error: cannot find symbol\\n    public void overwriteDoesntRemoveAnAlreadyReadElement() throws BufferIOException {\\n                                                                   ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:148: error: cannot find symbol\\n    public void initialClearDoesNotAffectWrappingAround() throws BufferIOException {\\n                                                                 ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBuffer.java:30: error: cannot find symbol\\n            throw new BufferIOException(\"Tried to read from empty buffer\");\\n                      ^\\n  symbol:   class BufferIOException\\n  location: class CircularBuffer<T>\\n  where T is a type-variable:\\n    T extends Object declared in class CircularBuffer\\nCircularBuffer.java:36: error: cannot find symbol\\n            throw new BufferIOException(\"Tried to write to full buffer\");\\n                      ^\\n  symbol:   class BufferIOException\\n  location: class CircularBuffer<T>\\n  where T is a type-variable:\\n    T extends Object declared in class CircularBuffer\\nCircularBufferTest.java:12: error: cannot find symbol\\n        assertThatExceptionOfType(BufferIOException.class)\\n                                  ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:32: error: cannot find symbol\\n        assertThatExceptionOfType(BufferIOException.class)\\n                                  ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:53: error: cannot find symbol\\n        assertThatExceptionOfType(BufferIOException.class)\\n                                  ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:87: error: cannot find symbol\\n        assertThatExceptionOfType(BufferIOException.class)\\n                                  ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\nCircularBufferTest.java:159: error: cannot find symbol\\n        assertThatExceptionOfType(BufferIOException.class)\\n                                  ^\\n  symbol:   class BufferIOException\\n  location: class CircularBufferTest\\n24 errors\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/circular_buffer_Exercism_java_rabestro/output.log",
            "language": "Java"
        },
        {
            "id": "Java_dominoes_Exercism (java_rabestro)",
            "error_message": "\u274c\u203c Errore nel container Java_dominoes_Exercism (java_rabestro) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/dominoes_Exercism_java_rabestro:/app', 'test_java_persistant', 'Dominoes.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nDominoes.java:6: error: cannot find symbol\\n    private static final ChainNotFoundException CHAIN_NOT_FOUND_EXCEPTION =\\n                         ^\\n  symbol:   class ChainNotFoundException\\n  location: class Dominoes\\nDominoes.java:9: error: cannot find symbol\\n    private static Predicate<Domino> matchesNumber(int number) {\\n                             ^\\n  symbol:   class Domino\\n  location: class Dominoes\\nDominoes.java:13: error: cannot find symbol\\n    List<Domino> formChain(List<Domino> inputDominoes) throws ChainNotFoundException {\\n                                ^\\n  symbol:   class Domino\\n  location: class Dominoes\\nDominoes.java:13: error: cannot find symbol\\n    List<Domino> formChain(List<Domino> inputDominoes) throws ChainNotFoundException {\\n         ^\\n  symbol:   class Domino\\n  location: class Dominoes\\nDominoes.java:13: error: cannot find symbol\\n    List<Domino> formChain(List<Domino> inputDominoes) throws ChainNotFoundException {\\n                                                              ^\\n  symbol:   class ChainNotFoundException\\n  location: class Dominoes\\nDominoesTest.java:15: error: cannot find symbol\\n    public void emtpyInputEmptyOutputTest() throws ChainNotFoundException {\\n                                                   ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:26: error: cannot find symbol\\n    public void singletonInputSingletonOutput() throws ChainNotFoundException {\\n                                                       ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:50: error: cannot find symbol\\n    public void threeElementsTest() throws ChainNotFoundException {\\n                                           ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:62: error: cannot find symbol\\n    public void canReverseDominoesTest() throws ChainNotFoundException {\\n                                                ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:125: error: cannot find symbol\\n    public void needBacktrackTest() throws ChainNotFoundException {\\n                                           ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:139: error: cannot find symbol\\n    public void separateLoopsTest() throws ChainNotFoundException {\\n                                           ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:153: error: cannot find symbol\\n    public void nineElementsTest() throws ChainNotFoundException {\\n                                          ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:179: error: cannot find symbol\\n    private void assertValidChain(List<Domino> inputDominoes, List<Domino> outputDominoes) {\\n                                       ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:179: error: cannot find symbol\\n    private void assertValidChain(List<Domino> inputDominoes, List<Domino> outputDominoes) {\\n                                                                   ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:185: error: cannot find symbol\\n    private void assertEndDominoesMatch(List<Domino> outputDominoes) {\\n                                             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:197: error: cannot find symbol\\n    private void assertSameDominoes(List<Domino> inputDominoes, List<Domino> outputDominoes) {\\n                                         ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:197: error: cannot find symbol\\n    private void assertSameDominoes(List<Domino> inputDominoes, List<Domino> outputDominoes) {\\n                                                                     ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:215: error: cannot find symbol\\n    private void assertConsecutiveDominoes(List<Domino> dominoes) {\\n                                                ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoes.java:7: error: cannot find symbol\\n            new ChainNotFoundException(\"No domino chain found.\");\\n                ^\\n  symbol:   class ChainNotFoundException\\n  location: class Dominoes\\nDominoes.java:18: error: cannot find symbol\\n        var result = new LinkedList<Domino>();\\n                                    ^\\n  symbol:   class Domino\\n  location: class Dominoes\\nDominoes.java:30: error: cannot find symbol\\n                nextDomino = new Domino(nextDomino.getRight(), nextDomino.getLeft());\\n                                 ^\\n  symbol:   class Domino\\n  location: class Dominoes\\nDominoesTest.java:18: error: cannot find symbol\\n        List<Domino> dominoesList = new ArrayList<>();\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:20: error: cannot find symbol\\n        List<Domino> chain = dominoes.formChain(dominoesList);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:29: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 1)};\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:29: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 1)};\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:30: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:32: error: cannot find symbol\\n        List<Domino> chain = dominoes.formChain(dominoesList);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:41: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2)};\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:41: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2)};\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:42: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:44: error: cannot find symbol\\n        assertThatExceptionOfType(ChainNotFoundException.class)\\n                                  ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:53: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(3, 1), new Domino(2, 3)};\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:53: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(3, 1), new Domino(2, 3)};\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:53: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(3, 1), new Domino(2, 3)};\\n                                                        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:53: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(3, 1), new Domino(2, 3)};\\n                                                                          ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:54: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:56: error: cannot find symbol\\n        List<Domino> chain = dominoes.formChain(dominoesList);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:65: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(1, 3), new Domino(2, 3)};\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:65: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(1, 3), new Domino(2, 3)};\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:65: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(1, 3), new Domino(2, 3)};\\n                                                        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:65: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(1, 3), new Domino(2, 3)};\\n                                                                          ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:66: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:68: error: cannot find symbol\\n        List<Domino> chain = dominoes.formChain(dominoesList);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:77: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(4, 1), new Domino(2, 3)};\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:77: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(4, 1), new Domino(2, 3)};\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:77: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(4, 1), new Domino(2, 3)};\\n                                                        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:77: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(4, 1), new Domino(2, 3)};\\n                                                                          ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:78: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:80: error: cannot find symbol\\n        assertThatExceptionOfType(ChainNotFoundException.class)\\n                                  ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:89: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 1), new Domino(2, 2)};\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:89: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 1), new Domino(2, 2)};\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:89: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 1), new Domino(2, 2)};\\n                                                        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:90: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:92: error: cannot find symbol\\n        assertThatExceptionOfType(ChainNotFoundException.class)\\n                                  ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:102: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 1), new Domino(3, 4), new Domino(4, 3)};\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:102: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 1), new Domino(3, 4), new Domino(4, 3)};\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:102: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 1), new Domino(3, 4), new Domino(4, 3)};\\n                                                        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:102: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 1), new Domino(3, 4), new Domino(4, 3)};\\n                                                                          ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:102: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 1), new Domino(3, 4), new Domino(4, 3)};\\n                                                                                            ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:103: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:105: error: cannot find symbol\\n        assertThatExceptionOfType(ChainNotFoundException.class)\\n                                  ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:115: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1), new Domino(4, 4)};\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:115: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1), new Domino(4, 4)};\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:115: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1), new Domino(4, 4)};\\n                                                        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:115: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1), new Domino(4, 4)};\\n                                                                          ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:115: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1), new Domino(4, 4)};\\n                                                                                            ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:116: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:118: error: cannot find symbol\\n        assertThatExceptionOfType(ChainNotFoundException.class)\\n                                  ^\\n  symbol:   class ChainNotFoundException\\n  location: class DominoesTest\\nDominoesTest.java:128: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1), new Domino(2, 4),\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:128: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1), new Domino(2, 4),\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:128: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1), new Domino(2, 4),\\n                                                        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:128: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1), new Domino(2, 4),\\n                                                                          ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:128: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1), new Domino(2, 4),\\n                                                                                            ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:129: error: cannot find symbol\\n            new Domino(4, 2)};\\n                ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:130: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:132: error: cannot find symbol\\n        List<Domino> chain = dominoes.formChain(dominoesList);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:142: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1),\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:142: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1),\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:142: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1),\\n                                                        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:142: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1),\\n                                                                          ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:143: error: cannot find symbol\\n            new Domino(1, 1), new Domino(2, 2), new Domino(3, 3)};\\n                ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:143: error: cannot find symbol\\n            new Domino(1, 1), new Domino(2, 2), new Domino(3, 3)};\\n                                  ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:143: error: cannot find symbol\\n            new Domino(1, 1), new Domino(2, 2), new Domino(3, 3)};\\n                                                    ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:144: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:146: error: cannot find symbol\\n        List<Domino> chain = dominoes.formChain(dominoesList);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:155: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(5, 3), new Domino(3, 1),\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:155: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(5, 3), new Domino(3, 1),\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:155: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(5, 3), new Domino(3, 1),\\n                                                        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:155: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(5, 3), new Domino(3, 1),\\n                                                                          ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:156: error: cannot find symbol\\n            new Domino(1, 2), new Domino(2, 4), new Domino(1, 6),\\n                ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:156: error: cannot find symbol\\n            new Domino(1, 2), new Domino(2, 4), new Domino(1, 6),\\n                                  ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:156: error: cannot find symbol\\n            new Domino(1, 2), new Domino(2, 4), new Domino(1, 6),\\n                                                    ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:157: error: cannot find symbol\\n            new Domino(2, 3), new Domino(3, 4), new Domino(5, 6)};\\n                ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:157: error: cannot find symbol\\n            new Domino(2, 3), new Domino(3, 4), new Domino(5, 6)};\\n                                  ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:157: error: cannot find symbol\\n            new Domino(2, 3), new Domino(3, 4), new Domino(5, 6)};\\n                                                    ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:158: error: cannot find symbol\\n        List<Domino> dominoesList = Arrays.asList(dominoesArray);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:160: error: cannot find symbol\\n        List<Domino> chain = dominoes.formChain(dominoesList);\\n             ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:170: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1),\\n        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:170: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1),\\n                                      ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\nDominoesTest.java:170: error: cannot find symbol\\n        Domino[] dominoesArray = {new Domino(1, 2), new Domino(2, 3), new Domino(3, 1),\\n                                                        ^\\n  symbol:   class Domino\\n  location: class DominoesTest\\n100 errors\\nonly showing the first 100 errors, of 107 total; use -Xmaxerrs if you would like to see more\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/dominoes_Exercism_java_rabestro/output.log",
            "language": "Java"
        },
        {
            "id": "Java_kindergarten_garden_Exercism (java_rabestro)",
            "error_message": "\u274c\u203c Errore nel container Java_kindergarten_garden_Exercism (java_rabestro) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/kindergarten_garden_Exercism_java_rabestro:/app', 'test_java_persistant', 'KindergartenGarden.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nKindergartenGarden.java:6: error: cannot find symbol\\n    List<Plant> getPlantsOfStudent(String student) {\\n         ^\\n  symbol:   class Plant\\n  location: class KindergartenGarden\\nKindergartenGarden.java:11: error: cannot find symbol\\n                .map(Plant::getPlant)\\n                     ^\\n  symbol:   variable Plant\\n  location: class KindergartenGarden\\nKindergartenGardenTest.java:13: error: cannot find symbol\\n                .containsExactly(Plant.RADISHES, Plant.CLOVER, Plant.GRASS, Plant.GRASS);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:13: error: cannot find symbol\\n                .containsExactly(Plant.RADISHES, Plant.CLOVER, Plant.GRASS, Plant.GRASS);\\n                                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:13: error: cannot find symbol\\n                .containsExactly(Plant.RADISHES, Plant.CLOVER, Plant.GRASS, Plant.GRASS);\\n                                                               ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:13: error: cannot find symbol\\n                .containsExactly(Plant.RADISHES, Plant.CLOVER, Plant.GRASS, Plant.GRASS);\\n                                                                            ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:22: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.CLOVER, Plant.RADISHES, Plant.CLOVER);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:22: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.CLOVER, Plant.RADISHES, Plant.CLOVER);\\n                                                ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:22: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.CLOVER, Plant.RADISHES, Plant.CLOVER);\\n                                                              ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:22: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.CLOVER, Plant.RADISHES, Plant.CLOVER);\\n                                                                              ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:31: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.RADISHES, Plant.CLOVER);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:31: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.RADISHES, Plant.CLOVER);\\n                                               ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:31: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.RADISHES, Plant.CLOVER);\\n                                                            ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:31: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.RADISHES, Plant.CLOVER);\\n                                                                            ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:40: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.CLOVER, Plant.CLOVER, Plant.CLOVER);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:40: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.CLOVER, Plant.CLOVER, Plant.CLOVER);\\n                                               ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:40: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.CLOVER, Plant.CLOVER, Plant.CLOVER);\\n                                                             ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:40: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.CLOVER, Plant.CLOVER, Plant.CLOVER);\\n                                                                           ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:49: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.GRASS, Plant.GRASS, Plant.GRASS);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:49: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.GRASS, Plant.GRASS, Plant.GRASS);\\n                                              ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:49: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.GRASS, Plant.GRASS, Plant.GRASS);\\n                                                           ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:49: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.GRASS, Plant.GRASS, Plant.GRASS);\\n                                                                        ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:58: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.RADISHES, Plant.VIOLETS, Plant.RADISHES);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:58: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.RADISHES, Plant.VIOLETS, Plant.RADISHES);\\n                                                ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:58: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.RADISHES, Plant.VIOLETS, Plant.RADISHES);\\n                                                                ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:58: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.RADISHES, Plant.VIOLETS, Plant.RADISHES);\\n                                                                               ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:67: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.CLOVER, Plant.CLOVER);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:67: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.CLOVER, Plant.CLOVER);\\n                                               ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:67: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.CLOVER, Plant.CLOVER);\\n                                                            ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:67: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.CLOVER, Plant.CLOVER);\\n                                                                          ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:76: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.VIOLETS, Plant.CLOVER, Plant.GRASS);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:76: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.VIOLETS, Plant.CLOVER, Plant.GRASS);\\n                                                ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:76: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.VIOLETS, Plant.CLOVER, Plant.GRASS);\\n                                                               ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:76: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.VIOLETS, Plant.CLOVER, Plant.GRASS);\\n                                                                             ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:85: error: cannot find symbol\\n                .containsExactly(Plant.RADISHES, Plant.VIOLETS, Plant.CLOVER, Plant.RADISHES);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:85: error: cannot find symbol\\n                .containsExactly(Plant.RADISHES, Plant.VIOLETS, Plant.CLOVER, Plant.RADISHES);\\n                                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:85: error: cannot find symbol\\n                .containsExactly(Plant.RADISHES, Plant.VIOLETS, Plant.CLOVER, Plant.RADISHES);\\n                                                                ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:85: error: cannot find symbol\\n                .containsExactly(Plant.RADISHES, Plant.VIOLETS, Plant.CLOVER, Plant.RADISHES);\\n                                                                              ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:94: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.RADISHES, Plant.GRASS);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:94: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.RADISHES, Plant.GRASS);\\n                                               ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:94: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.RADISHES, Plant.GRASS);\\n                                                            ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:94: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.RADISHES, Plant.GRASS);\\n                                                                            ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:103: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.VIOLETS, Plant.CLOVER);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:103: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.VIOLETS, Plant.CLOVER);\\n                                              ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:103: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.VIOLETS, Plant.CLOVER);\\n                                                            ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:103: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.VIOLETS, Plant.CLOVER);\\n                                                                           ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:112: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.GRASS, Plant.CLOVER);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:112: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.GRASS, Plant.CLOVER);\\n                                               ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:112: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.GRASS, Plant.CLOVER);\\n                                                            ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:112: error: cannot find symbol\\n                .containsExactly(Plant.CLOVER, Plant.GRASS, Plant.GRASS, Plant.CLOVER);\\n                                                                         ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:121: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.RADISHES, Plant.RADISHES, Plant.VIOLETS);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:121: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.RADISHES, Plant.RADISHES, Plant.VIOLETS);\\n                                                ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:121: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.RADISHES, Plant.RADISHES, Plant.VIOLETS);\\n                                                                ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:121: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.RADISHES, Plant.RADISHES, Plant.VIOLETS);\\n                                                                                ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:130: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.VIOLETS, Plant.CLOVER);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:130: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.VIOLETS, Plant.CLOVER);\\n                                              ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:130: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.VIOLETS, Plant.CLOVER);\\n                                                            ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:130: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.VIOLETS, Plant.CLOVER);\\n                                                                           ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:139: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.CLOVER, Plant.VIOLETS, Plant.GRASS);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:139: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.CLOVER, Plant.VIOLETS, Plant.GRASS);\\n                                                ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:139: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.CLOVER, Plant.VIOLETS, Plant.GRASS);\\n                                                              ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:139: error: cannot find symbol\\n                .containsExactly(Plant.VIOLETS, Plant.CLOVER, Plant.VIOLETS, Plant.GRASS);\\n                                                                             ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:148: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.CLOVER, Plant.GRASS);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:148: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.CLOVER, Plant.GRASS);\\n                                              ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:148: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.CLOVER, Plant.GRASS);\\n                                                            ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:148: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.CLOVER, Plant.CLOVER, Plant.GRASS);\\n                                                                          ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:157: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.VIOLETS, Plant.CLOVER, Plant.VIOLETS);\\n                                 ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:157: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.VIOLETS, Plant.CLOVER, Plant.VIOLETS);\\n                                              ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:157: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.VIOLETS, Plant.CLOVER, Plant.VIOLETS);\\n                                                             ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\nKindergartenGardenTest.java:157: error: cannot find symbol\\n                .containsExactly(Plant.GRASS, Plant.VIOLETS, Plant.CLOVER, Plant.VIOLETS);\\n                                                                           ^\\n  symbol:   variable Plant\\n  location: class KindergartenGardenTest\\n70 errors\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/kindergarten_garden_Exercism_java_rabestro/output.log",
            "language": "Java"
        },
        {
            "id": "Java_ledger_Exercism (java_rabestro)",
            "error_message": "\u274c\u203c Errore nel container Java_ledger_Exercism (java_rabestro) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/ledger_Exercism_java_rabestro:/app', 'test_java_persistant', 'LedgerFormatter.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nLedgerFormatter.java:16: error: cannot find symbol\\n    public LedgerFormatter(Config config) {\\n                           ^\\n  symbol:   class Config\\n  location: class LedgerFormatter\\nLedgerTest.java:8: error: cannot find symbol\\n@ExtendWith(LocaleExtension.class)\\n            ^\\n  symbol: class LocaleExtension\\nLedgerFormatter.java:36: error: cannot find symbol\\n        stringFormatter = new StringTruncator(descriptionColWidth, resource.getString(\"truncation.suffix\"));\\n                              ^\\n  symbol:   class StringTruncator\\n  location: class LedgerFormatter\\nLedger.java:10: error: cannot find symbol\\n        var config = new Config(currencyName, localeName);\\n                         ^\\n  symbol:   class Config\\n  location: class Ledger\\n4 errors\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/ledger_Exercism_java_rabestro/output.log",
            "language": "Java"
        },
        {
            "id": "Java_poker_Exercism (java_rabestro)",
            "error_message": "\u274c\u203c Errore nel container Java_poker_Exercism (java_rabestro) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/poker_Exercism_java_rabestro:/app', 'test_java_persistant', 'Poker.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nPoker.java:6: error: cannot find symbol\\n    private final List<Hand> hands;\\n                       ^\\n  symbol:   class Hand\\n  location: class Poker\\nPoker.java:10: error: cannot find symbol\\n                .map(Hand::new)\\n                     ^\\n  symbol:   class Hand\\n  location: class Poker\\nPoker.java:11: error: cannot find symbol\\n                .sorted(Comparator.comparing(Hand::value))\\n                                             ^\\n  symbol:   variable Hand\\n  location: class Poker\\nPoker.java:18: error: cannot find symbol\\n                .map(Hand::representation)\\n                     ^\\n  symbol:   variable Hand\\n  location: class Poker\\n4 errors\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/poker_Exercism_java_rabestro/output.log",
            "language": "Java"
        },
        {
            "id": "Java_squeaky_clean_Exercism (java_rabestro)",
            "error_message": "\u274c\u203c Errore nel container Java_squeaky_clean_Exercism (java_rabestro) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/squeaky_clean_Exercism_java_rabestro:/app', 'test_java_persistant', 'SqueakyClean.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nSqueakyClean.java:5: error: cannot find symbol\\n                .map(new SqueakyCodePointConverter())\\n                         ^\\n  symbol:   class SqueakyCodePointConverter\\n  location: class SqueakyClean\\n1 error\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/squeaky_clean_Exercism_java_rabestro/output.log",
            "language": "Java"
        },
        {
            "id": "Java_calculator_conundrum_Exercism (java_ValMati)",
            "error_message": "\u274c\u203c Errore nel container Java_calculator_conundrum_Exercism (java_ValMati) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/calculator_conundrum_Exercism_java_ValMati:/app', 'test_java_persistant', 'CalculatorConundrum.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nCalculatorConundrum.java:19: error: cannot find symbol\\n                    throw new IllegalOperationException(\"Division by zero is not allowed\", ex);\\n                              ^\\n  symbol:   class IllegalOperationException\\n  location: class CalculatorConundrum\\nCalculatorConundrum.java:22: error: cannot find symbol\\n            default -> throw new IllegalOperationException(String.format(\"Operation \\'%s\\' does not exist\", operation));\\n                                 ^\\n  symbol:   class IllegalOperationException\\n  location: class CalculatorConundrum\\nCalculatorConundrumTest.java:57: error: cannot find symbol\\n        assertThatExceptionOfType(IllegalOperationException.class)\\n                                  ^\\n  symbol:   class IllegalOperationException\\n  location: class CalculatorConundrumTest\\nCalculatorConundrumTest.java:84: error: cannot find symbol\\n        assertThatExceptionOfType(IllegalOperationException.class)\\n                                  ^\\n  symbol:   class IllegalOperationException\\n  location: class CalculatorConundrumTest\\n4 errors\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/calculator_conundrum_Exercism_java_ValMati/output.log",
            "language": "Java"
        },
        {
            "id": "Java_lasagna_Exercism (java_ValMati)",
            "error_message": "\u274c\u203c Errore nel container Java_lasagna_Exercism (java_ValMati) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/lasagna_Exercism_java_ValMati:/app', 'test_java_persistant', 'Lasagna.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nLasagnaTest.java:5: error: package utils does not exist\\nimport utils.Lasagna;\\n            ^\\nLasagnaTest.java:15: error: cannot find symbol\\n        assertThat(new Lasagna().hasMethod(\"expectedMinutesInOven\"))\\n                                ^\\n  symbol:   method hasMethod(String)\\n  location: class Lasagna\\nLasagnaTest.java:18: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodPublic(\"expectedMinutesInOven\"))\\n                                ^\\n  symbol:   method isMethodPublic(String)\\n  location: class Lasagna\\nLasagnaTest.java:21: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodReturnType(int.class, \"expectedMinutesInOven\"))\\n                                ^\\n  symbol:   method isMethodReturnType(Class<Integer>,String)\\n  location: class Lasagna\\nLasagnaTest.java:37: error: cannot find symbol\\n        assertThat(new Lasagna().hasMethod(\"remainingMinutesInOven\", int.class))\\n                                ^\\n  symbol:   method hasMethod(String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:40: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodPublic(\"remainingMinutesInOven\", int.class))\\n                                ^\\n  symbol:   method isMethodPublic(String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:43: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodReturnType(int.class, \"remainingMinutesInOven\", int.class))\\n                                ^\\n  symbol:   method isMethodReturnType(Class<Integer>,String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:59: error: cannot find symbol\\n        assertThat(new Lasagna().hasMethod(\"preparationTimeInMinutes\", int.class))\\n                                ^\\n  symbol:   method hasMethod(String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:62: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodPublic(\"preparationTimeInMinutes\", int.class))\\n                                ^\\n  symbol:   method isMethodPublic(String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:65: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodReturnType(int.class, \"preparationTimeInMinutes\", int.class))\\n                                ^\\n  symbol:   method isMethodReturnType(Class<Integer>,String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:88: error: cannot find symbol\\n        assertThat(new Lasagna().hasMethod(\"totalTimeInMinutes\", int.class, int.class))\\n                                ^\\n  symbol:   method hasMethod(String,Class<Integer>,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:91: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodPublic(\"totalTimeInMinutes\", int.class, int.class))\\n                                ^\\n  symbol:   method isMethodPublic(String,Class<Integer>,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:94: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodReturnType(int.class, \"totalTimeInMinutes\", int.class, int.class))\\n                                ^\\n  symbol:   method isMethodReturnType(Class<Integer>,String,Class<Integer>,Class<Integer>)\\n  location: class Lasagna\\n13 errors\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/lasagna_Exercism_java_ValMati/output.log",
            "language": "Java"
        },
        {
            "id": "Java_calculator_conundrum_Exercism (java_tusktenon)",
            "error_message": "\u274c\u203c Errore nel container Java_calculator_conundrum_Exercism (java_tusktenon) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/calculator_conundrum_Exercism_java_tusktenon:/app', 'test_java_persistant', 'CalculatorConundrum.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nCalculatorConundrum.java:11: error: cannot find symbol\\n            throw new IllegalOperationException(\"Operation \\'\" + operation + \"\\' does not exist\");\\n                      ^\\n  symbol:   class IllegalOperationException\\n  location: class CalculatorConundrum\\nCalculatorConundrum.java:14: error: cannot find symbol\\n      throw new IllegalOperationException(\"Division by zero is not allowed\", e);\\n                ^\\n  symbol:   class IllegalOperationException\\n  location: class CalculatorConundrum\\nCalculatorConundrumTest.java:57: error: cannot find symbol\\n        assertThatExceptionOfType(IllegalOperationException.class)\\n                                  ^\\n  symbol:   class IllegalOperationException\\n  location: class CalculatorConundrumTest\\nCalculatorConundrumTest.java:84: error: cannot find symbol\\n        assertThatExceptionOfType(IllegalOperationException.class)\\n                                  ^\\n  symbol:   class IllegalOperationException\\n  location: class CalculatorConundrumTest\\n4 errors\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/calculator_conundrum_Exercism_java_tusktenon/output.log",
            "language": "Java"
        },
        {
            "id": "Java_lasagna_Exercism (java_tusktenon)",
            "error_message": "\u274c\u203c Errore nel container Java_lasagna_Exercism (java_tusktenon) -  | result:\nCompletedProcess(args=['docker', 'run', '--rm', '-v', '/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/lasagna_Exercism_java_tusktenon:/app', 'test_java_persistant', 'Lasagna.java'], returncode=1, stdout='\u2b07\ufe0f Scarico librerie JUnit 5, Hamcrest, AssertJ...\\n\ud83d\udd0d Compilazione...\\nLasagnaTest.java:5: error: package utils does not exist\\nimport utils.Lasagna;\\n            ^\\nLasagnaTest.java:15: error: cannot find symbol\\n        assertThat(new Lasagna().hasMethod(\"expectedMinutesInOven\"))\\n                                ^\\n  symbol:   method hasMethod(String)\\n  location: class Lasagna\\nLasagnaTest.java:18: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodPublic(\"expectedMinutesInOven\"))\\n                                ^\\n  symbol:   method isMethodPublic(String)\\n  location: class Lasagna\\nLasagnaTest.java:21: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodReturnType(int.class, \"expectedMinutesInOven\"))\\n                                ^\\n  symbol:   method isMethodReturnType(Class<Integer>,String)\\n  location: class Lasagna\\nLasagnaTest.java:37: error: cannot find symbol\\n        assertThat(new Lasagna().hasMethod(\"remainingMinutesInOven\", int.class))\\n                                ^\\n  symbol:   method hasMethod(String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:40: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodPublic(\"remainingMinutesInOven\", int.class))\\n                                ^\\n  symbol:   method isMethodPublic(String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:43: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodReturnType(int.class, \"remainingMinutesInOven\", int.class))\\n                                ^\\n  symbol:   method isMethodReturnType(Class<Integer>,String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:59: error: cannot find symbol\\n        assertThat(new Lasagna().hasMethod(\"preparationTimeInMinutes\", int.class))\\n                                ^\\n  symbol:   method hasMethod(String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:62: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodPublic(\"preparationTimeInMinutes\", int.class))\\n                                ^\\n  symbol:   method isMethodPublic(String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:65: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodReturnType(int.class, \"preparationTimeInMinutes\", int.class))\\n                                ^\\n  symbol:   method isMethodReturnType(Class<Integer>,String,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:88: error: cannot find symbol\\n        assertThat(new Lasagna().hasMethod(\"totalTimeInMinutes\", int.class, int.class))\\n                                ^\\n  symbol:   method hasMethod(String,Class<Integer>,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:91: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodPublic(\"totalTimeInMinutes\", int.class, int.class))\\n                                ^\\n  symbol:   method isMethodPublic(String,Class<Integer>,Class<Integer>)\\n  location: class Lasagna\\nLasagnaTest.java:94: error: cannot find symbol\\n        assertThat(new Lasagna().isMethodReturnType(int.class, \"totalTimeInMinutes\", int.class, int.class))\\n                                ^\\n  symbol:   method isMethodReturnType(Class<Integer>,String,Class<Integer>,Class<Integer>)\\n  location: class Lasagna\\n13 errors\\n')\n",
            "log_file_path": "/Users/mars/Desktop/Everything/Pisa/tesi/src/dataset/Java/lasagna_Exercism_java_tusktenon/output.log",
            "language": "Java"
        }
    ]
}