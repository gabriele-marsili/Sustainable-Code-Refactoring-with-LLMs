# ============================================================================
# UNIVERSAL MAKEFILE FOR C PROJECTS
# ============================================================================
# Auto-detects project structure, test framework, and compiles accordingly
# Designed to work with any C project regardless of directory structure
# ============================================================================

# Compiler and flags
CC = gcc
CFLAGS = -std=c11 -Wall -Wextra -O0 -g0

# ============================================================================
# AUTO-DETECTION: Find all source and test files
# ============================================================================

# Find all .c files, excluding build directories and common excludes
ALL_C_FILES = $(shell find . -type f -name "*.c" 2>/dev/null | \
              grep -v "/build/" | \
              grep -v "/obj/" | \
              grep -v "/.git/" | \
              grep -v "/node_modules/")

# Separate source files from test files
TEST_FILES = $(filter %test.c %_test.c %-test.c %Test.c, $(ALL_C_FILES))
SRC_FILES = $(filter-out $(TEST_FILES), $(ALL_C_FILES))

# Find all header directories
HEADER_DIRS = $(shell find . -type f -name "*.h" 2>/dev/null | \
              xargs -r dirname | sort -u | \
              grep -v "/build/" | \
              grep -v "/obj/" | \
              grep -v "/.git/")

# Add include paths for all directories containing headers
INCLUDE_FLAGS = $(foreach dir,$(HEADER_DIRS),-I$(dir))

# Always include common directories
INCLUDE_FLAGS += -I. -I./src -I./test -I./include -I/usr/local/include

# Update CFLAGS with include paths
CFLAGS += $(INCLUDE_FLAGS)

# ============================================================================
# AUTO-DETECTION: Test Framework
# ============================================================================

# Check which test framework is being used
HAS_UNITY = $(shell grep -l "unity.h\|unity_fixture.h" $(TEST_FILES) 2>/dev/null)
HAS_CMOCKA = $(shell grep -l "cmocka.h" $(TEST_FILES) 2>/dev/null)
HAS_CHECK = $(shell grep -l "check.h" $(TEST_FILES) 2>/dev/null)

# Determine framework and add appropriate flags
ifneq ($(HAS_UNITY),)
    TEST_FRAMEWORK = unity
    # Unity is typically vendored, no special linking needed
else ifneq ($(HAS_CMOCKA),)
    TEST_FRAMEWORK = cmocka
    LDFLAGS += -lcmocka
else ifneq ($(HAS_CHECK),)
    TEST_FRAMEWORK = check
    LDFLAGS += -lcheck -lm -lpthread -lrt -lsubunit
else
    TEST_FRAMEWORK = none
endif

# Common linker flags for C
LDFLAGS += -lm

# ============================================================================
# OBJECT FILES
# ============================================================================

OBJ_DIR = obj
SRC_OBJ = $(patsubst ./%.c, $(OBJ_DIR)/%.o, $(SRC_FILES))
TEST_OBJ = $(patsubst ./%.c, $(OBJ_DIR)/%.o, $(TEST_FILES))

# ============================================================================
# MAIN TARGET
# ============================================================================

TARGET = tests.out

.PHONY: all clean info

all: $(TARGET)

# ============================================================================
# LINKING
# ============================================================================

$(TARGET): $(OBJ_DIR) $(SRC_OBJ) $(TEST_OBJ)
	@echo "ðŸ”— Linking executable with $(TEST_FRAMEWORK) framework..."
	@echo "   Source objects: $(words $(SRC_OBJ))"
	@echo "   Test objects: $(words $(TEST_OBJ))"
	$(CC) $(CFLAGS) $(SRC_OBJ) $(TEST_OBJ) $(LDFLAGS) -o $@
	@echo "âœ… Build complete: $(TARGET)"

# ============================================================================
# COMPILATION RULES
# ============================================================================

# Create object directory structure
$(OBJ_DIR):
	@mkdir -p $(OBJ_DIR)
	@# Create subdirectories for nested source files
	@for file in $(SRC_FILES) $(TEST_FILES); do \
		objfile=$$(echo $$file | sed 's|^\./||'); \
		objdir=$$(dirname "$(OBJ_DIR)/$$objfile"); \
		mkdir -p "$$objdir"; \
	done

# Generic rule to compile any .c file to .o file
$(OBJ_DIR)/%.o: ./%.c
	@echo "ðŸ”¨ Compiling $<..."
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# ============================================================================
# UTILITY TARGETS
# ============================================================================

info:
	@echo "============================================================"
	@echo "UNIVERSAL MAKEFILE - PROJECT INFO"
	@echo "============================================================"
	@echo "Test Framework: $(TEST_FRAMEWORK)"
	@echo ""
	@echo "Source Files ($(words $(SRC_FILES))):"
	@$(foreach file,$(SRC_FILES),echo "  - $(file)";)
	@echo ""
	@echo "Test Files ($(words $(TEST_FILES))):"
	@$(foreach file,$(TEST_FILES),echo "  - $(file)";)
	@echo ""
	@echo "Header Directories:"
	@$(foreach dir,$(HEADER_DIRS),echo "  - $(dir)";)
	@echo ""
	@echo "Compiler Flags:"
	@echo "  $(CFLAGS)"
	@echo ""
	@echo "Linker Flags:"
	@echo "  $(LDFLAGS)"
	@echo "============================================================"

clean:
	@echo "ðŸ§¹ Cleaning build artifacts..."
	rm -rf $(OBJ_DIR) $(TARGET)
	@echo "âœ… Clean complete"

# Debug target to check detection
debug:
	@echo "ALL_C_FILES: $(ALL_C_FILES)"
	@echo "SRC_FILES: $(SRC_FILES)"
	@echo "TEST_FILES: $(TEST_FILES)"
	@echo "HAS_UNITY: $(HAS_UNITY)"
	@echo "HAS_CMOCKA: $(HAS_CMOCKA)"
	@echo "HAS_CHECK: $(HAS_CHECK)"
	@echo "TEST_FRAMEWORK: $(TEST_FRAMEWORK)"
